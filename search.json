[{"path":[]},{"path":"http://www.peteredewitt.com/cpr/articles/cnr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Tensor Products of B-Splines, Control Nets, and Control Net Reduction","text":"","code":"sessionInfo() ## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cpr_0.3.0.9000 qwraps2_0.6.0  ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5       cli_3.6.2         knitr_1.45        rlang_1.1.2       ##  [5] xfun_0.41         stringi_1.8.3     purrr_1.0.2       textshaping_0.3.7 ##  [9] jsonlite_1.8.8    glue_1.6.2        htmltools_0.5.7   ragg_1.2.7        ## [13] sass_0.4.8        rmarkdown_2.25    evaluate_0.23     jquerylib_0.1.4   ## [17] fastmap_1.1.1     yaml_2.3.8        lifecycle_1.0.4   memoise_2.0.1     ## [21] stringr_1.5.1     compiler_4.3.2    fs_1.6.3          Rcpp_1.0.11       ## [25] systemfonts_1.0.5 digest_0.6.33     R6_2.5.1          magrittr_2.0.3    ## [29] bslib_0.6.1       tools_4.3.2       pkgdown_2.0.7     cachem_1.0.8      ## [33] desc_1.4.3"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"b-splines-and-control-polygons","dir":"Articles","previous_headings":"","what":"B-splines and Control Polygons","title":"Control Polygon Reduction","text":"term “spline” likely derived shipwright draftsmen splines, thin wood strips, held place weights, used define curves. splines naturally minimize strain energy use additional weights strategic locations spline needed achieve specific curvatures. Cubic B-splines dissimilar. Splines piecewise polynomial curves differentiable prescribed order. B-splines based basis polynomial functions. Definitions notation uni-variable multi-variable B-splines associated control polygons control nets presented following. Two good references splines de Boor (2001) Prautzsch, Boehm, Paluszny (2002) wish dig details.","code":""},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"b-splines","dir":"Articles","previous_headings":"B-splines and Control Polygons","what":"B-splines","title":"Control Polygon Reduction","text":"curve defined \\(f\\left(x\\right)\\) spline order \\(k\\) (degree \\(k -1\\)), knots \\(\\xi_1, \\xi_2, \\ldots, \\xi_m\\) \\(\\xi_j \\leq x_{j+1}\\) \\(\\xi_{j} < \\xi_{j + k} \\forall \\) \\(f\\left(x\\right)\\) \\(k-r-1\\) times differentiable \\(r\\)-fold knot, \\(f\\left(x\\right)\\) polynomial order \\(\\leq k\\) interval \\(x \\\\left[\\xi_j, \\xi_{j+1}\\right]\\) \\(j = 0, \\ldots, m - 1.\\) particular, B-splines, defined affine combination: \\[\\begin{equation}   f \\left( x \\right) =   \\sum_{j} \\theta_j B_{j,k,\\boldsymbol{\\xi}}\\left(x\\right) =   \\boldsymbol{B}_{k, \\boldsymbol{\\xi}} \\left(x\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}   \\label{eq:f} \\end{equation}\\] \\(B_{j,k,\\boldsymbol{\\xi}}\\left(x\\right)\\) \\(j^{th}\\) basis spline function, \\(\\boldsymbol{\\xi}\\) sequence \\(l\\) interior knots total \\(2k\\) boundary knots, .e., cardinality knot sequence \\(\\left\\lvert \\boldsymbol{\\xi} \\right\\rvert = 2k + l.\\) value \\(k\\) boundary knots arbitrary, common choice use \\(k\\)-fold knots boundary: \\[ \\xi_1 = \\xi_2 = \\cdots = \\xi_k < \\xi_{k+1} \\leq \\cdots \\leq \\xi_{k + l} = \\xi_{k + l + 1} = \\cdots = \\xi_{2k + l}.\\] Alternative boundary knots can used long sequence \\(\\boldsymbol{\\xi}\\) non-decreasing. implications \\(k\\)-fold boundary knots follow next section. \\(j^{th}\\) B-spline defined : \\[\\begin{equation} B_{j,k,\\boldsymbol{\\xi}}\\left(x\\right) = \\omega_{j,k,\\boldsymbol{\\xi}} \\left(x\\right) B_{j,k-1,\\boldsymbol{\\xi}}\\left(x\\right) + \\left(1 - \\omega_{j+1,k,\\boldsymbol{\\xi}} \\right) B_{j+1,k-1,\\boldsymbol{\\xi}}\\left(x\\right), \\end{equation}\\] \\[\\begin{equation} B_{j,k,\\boldsymbol{\\xi}}\\left(x\\right) = 0 \\quad \\text{} \\quad x \\notin \\left[\\xi_j, \\xi_{j+k} \\right), \\quad \\quad B_{j,1,\\boldsymbol{\\xi}}\\left(x\\right) = \\begin{cases} 1 & x \\\\left[\\xi_j, \\xi_{j+k}\\right) \\\\ 0 & \\text{otherwise}, \\end{cases} \\end{equation}\\] \\[\\begin{equation} \\omega_{j,k,\\boldsymbol{\\xi}}\\left(x\\right) = \\begin{cases} 0 & x \\leq \\xi_j \\\\ \\frac{x-\\xi_j}{\\xi_{j+k-1} - \\xi_{j}} & \\xi_j < x < \\xi_{j+k-1} \\\\ 1 & \\xi_{j+k-1} \\leq x. \\end{cases} \\end{equation}\\] set observations, \\(\\boldsymbol{x} = x_1, \\ldots, x_n,\\) basis functions defined generalize matrix: \\[\\begin{equation}   \\boldsymbol{B}_{k, \\boldsymbol{\\xi}} \\left(\\boldsymbol{x}\\right) =   \\begin{pmatrix}     B_{1, k, \\boldsymbol{\\xi}} \\left(x_1\\right) &     B_{2, k, \\boldsymbol{\\xi}} \\left(x_1\\right) &     \\ldots &     B_{k + l, k, \\boldsymbol{\\xi}} \\left(x_1\\right) \\\\     \\vdots & \\vdots & \\ddots & \\vdots \\\\     B_{1, k, \\boldsymbol{\\xi}} \\left(x_n\\right) &     B_{2, k, \\boldsymbol{\\xi}} \\left(x_n\\right) &     \\ldots &     B_{k + l, k, \\boldsymbol{\\xi}} \\left(x_n\\right).   \\end{pmatrix} \\end{equation}\\] Within cpr package can generate basis matrix thusly: Note: default order bsplines 4, default boundary knots range x. However, relying default boundary knots can lead unexpected behavior , definition splines \\(k\\)-fold upper boundary 0. can quickly view plot spline functions well.  many important properties basis functions: \\[B_{j,k,\\boldsymbol{xi}} \\left(x\\right) \\\\left[0, 1\\right], \\forall x \\\\mathbb{R};\\] \\[B_{j,k,\\boldsymbol{\\xi}} \\left(x\\right) > 0 \\quad \\text{} \\quad x \\\\left(\\xi_{j}, \\xi_{j+k}\\right);\\] \\[\\sum_j B_{j,k,\\boldsymbol{xi}} \\left(x\\right) = \\begin{cases} 1 & x \\\\left[\\xi_1, \\xi_{2k+l}\\right) \\\\ 0 & otherwise. \\end{cases}\\]","code":"x <- seq(0, 5.9999, length.out = 5000) bmat <- bsplines(x, iknots = c(1, 1.5, 2.3, 4, 4.5), bknots = c(0, 6)) bmat ## Basis matrix dims: [5,000 x 9] ## Order: 4 ## Number of internal knots: 5 ##  ## First 6 rows: ##  ##           [,1]        [,2]         [,3]         [,4] [,5] [,6] [,7] [,8] [,9] ## [1,] 1.0000000 0.000000000 0.000000e+00 0.000000e+00    0    0    0    0    0 ## [2,] 0.9964037 0.003593461 2.878634e-06 5.011451e-10    0    0    0    0    0 ## [3,] 0.9928160 0.007172539 1.150485e-05 4.009161e-09    0    0    0    0    0 ## [4,] 0.9892369 0.010737255 2.586411e-05 1.353092e-08    0    0    0    0    0 ## [5,] 0.9856664 0.014287632 4.594188e-05 3.207329e-08    0    0    0    0    0 ## [6,] 0.9821045 0.017823691 7.172363e-05 6.264314e-08    0    0    0    0    0 plot(bmat, show_xi = TRUE, show_x = TRUE) all(bmat >= 0) ## [1] TRUE all(bmat <= 1) ## [1] TRUE all.equal(rowSums(bmat), rep(1, nrow(bmat))) ## [1] TRUE"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"cprbsplines-vs-splinesbs","dir":"Articles","previous_headings":"B-splines and Control Polygons > B-splines","what":"cpr::bsplines vs splines::bs","title":"Control Polygon Reduction","text":"Part base R distribution splines package build B-splines calling bs. three areas functions differ: 1. input arguments, 2. attributes returned matrix, 3. behavior right boundary knot.","code":""},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"input-arguments","dir":"Articles","previous_headings":"B-splines and Control Polygons > B-splines > cpr::bsplines vs splines::bs","what":"Input Arguments","title":"Control Polygon Reduction","text":"bsplines intercept warn.outside arguments matrix generated bsplines effectively always intercept = TRUE warn.outside = TRUE. values x right boundary, outside boundary treated also differ two functions.","code":"args(bsplines) ## function (x, iknots = NULL, df = NULL, bknots = range(x), order = 4L)  ## NULL args(splines::bs) ## function (x, df = NULL, knots = NULL, degree = 3, intercept = FALSE,  ##     Boundary.knots = range(x), warn.outside = TRUE)  ## NULL"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"attributes-of-the-returned-matrices","dir":"Articles","previous_headings":"B-splines and Control Polygons > B-splines > cpr::bsplines vs splines::bs","what":"Attributes of the returned matrices","title":"Control Polygon Reduction","text":"default call B-spline functions returns basis matrix order 4 (degree 3; cubic) B-spline boundary knots placed range(x). However, returns . bspline_mat additional attributes related control polygons. major difference dimension matrices. default splines::bs omits one column basis matrix using using function regression formula resulting design matrix rank deficient. Using bsplines suggest using +0 -1 regression formula omit intercept (nuance handled calls cp end user need worry ).","code":"bs_mat <- splines::bs(x, knots = attr(bmat, \"iknots\"), Boundary.knots = attr(bmat, \"bknots\")) str(attributes(bmat)) ## List of 10 ##  $ dim        : int [1:2] 5000 9 ##  $ order      : num 4 ##  $ df         : num 9 ##  $ iknots     : num [1:5] 1 1.5 2.3 4 4.5 ##  $ bknots     : num [1:2] 0 6 ##  $ xi         : num [1:13] 0 0 0 0 1 1.5 2.3 4 4.5 6 ... ##  $ xi_star    : num [1:9] 0 0.333 0.833 1.6 2.6 ... ##  $ class      : chr [1:2] \"cpr_bs\" \"matrix\" ##  $ call       : language bsplines(x = x, iknots = c(1, 1.5, 2.3, 4, 4.5), bknots = c(0, 6)) ##  $ environment:<environment: R_GlobalEnv> str(attributes(bs_mat)) ## List of 7 ##  $ dim           : int [1:2] 5000 8 ##  $ dimnames      :List of 2 ##   ..$ : NULL ##   ..$ : chr [1:8] \"1\" \"2\" \"3\" \"4\" ... ##  $ degree        : int 3 ##  $ knots         : num [1:5] 1 1.5 2.3 4 4.5 ##  $ Boundary.knots: num [1:2] 0 6 ##  $ intercept     : logi FALSE ##  $ class         : chr [1:3] \"bs\" \"basis\" \"matrix\""},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"right-continuity","dir":"Articles","previous_headings":"B-splines and Control Polygons > B-splines > cpr::bsplines vs splines::bs","what":"Right Continuity","title":"Control Polygon Reduction","text":"definition, \\(\\boldsymbol{B}_{j,k,\\boldsymbol{\\xi}}\\left(x\\right)\\) non-negative right-continuous functions. bsplines adheres definition strictly, whereas splines::bs uses pivoting method allow non-zero extrapolations outside support. Example: cpr::bsplines call, notice first, third, fifth rows, corresponding values outside support zeros row sums. Compare splines::bs returns negative values matrix, rows sum 1.","code":"bspline_eg <- bsplines(c(0, 1, 2, 5, 6), bknots = c(1, 5)) ## Warning in bsplines(c(0, 1, 2, 5, 6), bknots = c(1, 5)): At least one x value < ## min(bknots) ## Warning in bsplines(c(0, 1, 2, 5, 6), bknots = c(1, 5)): At least one x value ## >= max(bknots) bs_eg      <- splines::bs(c(0, 1, 2, 5, 6), Boundary.knots = c(1, 5), intercept = TRUE ) ## Warning in splines::bs(c(0, 1, 2, 5, 6), Boundary.knots = c(1, 5), intercept = ## TRUE): some 'x' values beyond boundary knots may cause ill-conditioned bases  head(bspline_eg) ##          [,1]     [,2]     [,3]     [,4] ## [1,] 0.000000 0.000000 0.000000 0.000000 ## [2,] 1.000000 0.000000 0.000000 0.000000 ## [3,] 0.421875 0.421875 0.140625 0.015625 ## [4,] 0.000000 0.000000 0.000000 0.000000 ## [5,] 0.000000 0.000000 0.000000 0.000000 rowSums(bspline_eg) ## [1] 0 1 1 0 0  head(bs_eg) ##              1         2         3         4 ## [1,]  1.953125 -1.171875  0.234375 -0.015625 ## [2,]  1.000000  0.000000  0.000000  0.000000 ## [3,]  0.421875  0.421875  0.140625  0.015625 ## [4,]  0.000000  0.000000  0.000000  1.000000 ## [5,] -0.015625  0.234375 -1.171875  1.953125 rowSums(bs_eg) ## [1] 1 1 1 1 1"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"control-polygons","dir":"Articles","previous_headings":"","what":"Control Polygons","title":"Control Polygon Reduction","text":"spline \\(f\\left(\\boldsymbol{x}\\right) = \\boldsymbol{B}_{k,\\boldsymbol{\\xi}}\\left(\\boldsymbol{x}\\right)\\) convex sum coefficients \\(\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}.\\) meaningful geometric relationship \\(\\boldsymbol{\\xi}\\) \\(\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}\\) exist form control polygon, \\(CP_{k,\\boldsymbol{\\xi},\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}},\\) strong convex hull \\(\\boldsymbol{B}_{k,\\boldsymbol{\\xi}}\\left(\\boldsymbol{x}\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}.\\) \\[\\begin{equation} CP_{k,\\boldsymbol{\\xi},\\boldsymbol{\\theta}_{\\xi}} = \\left\\{ \\left( \\xi_{j}^{*}, \\theta_{j,\\boldsymbol{\\xi}} \\right) \\right \\}_{j=1}^{\\left\\lvert\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}\\right\\rvert}; \\quad \\quad \\xi_{j}^{*} = \\frac{1}{k-1} \\sum_{= 1}^{k-1} \\xi_{j + }. \\end{equation}\\] \\(CP_{k,\\boldsymbol{\\xi},\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}}\\) sequence \\(\\left\\lvert \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} \\right\\rvert = k + l\\) control vertices. control polygon can thought piecewise linear function approximating spline function. Changes convexity subtle characteristics spline function exaggerated control polygon. example, using basis matrix defined following coefficients can easily define spline function control polygon. Plotting control polygon corresponding spline:","code":"theta <- matrix(c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5), ncol = 1) cp0 <- cp(bmat, theta) plot(cp0, show_spline = TRUE)"},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"spline-spaces-and-inserting-a-knot","dir":"Articles","previous_headings":"Knot Influence","what":"Spline Spaces and Inserting a Knot","title":"Control Polygon Reduction","text":"Consider two knot sequences \\(\\boldsymbol{\\xi}\\) \\(\\boldsymbol{\\xi} \\cup \\boldsymbol{\\xi}'.\\) , given polynomial order \\(k,\\) spline space \\(\\mathbb{S}_{k,\\boldsymbol{\\xi}} \\subset \\mathbb{S}_{k,\\boldsymbol{\\xi} \\cup \\boldsymbol{\\xi}'}\\) (de Boor 2001, pg135). Given relationship spline spaces, convex sums generating spline functions, Boehm (1980) presented method inserting knots knot sequence spline function unchanged. Specifically, \\[ \\boldsymbol{\\xi}' = \\left\\{\\left. \\xi_{j}' \\right| \\min\\left(\\boldsymbol{\\xi}\\right) < \\xi_j < \\max\\left(\\boldsymbol{\\xi}\\right) \\quad \\forall j\\right\\}, \\] exist \\(\\boldsymbol{\\theta}_{\\boldsymbol{\\xi} \\cup \\boldsymbol{\\xi}'}\\) \\[ \\boldsymbol{B}_{k,\\boldsymbol{\\xi}} \\left(x\\right)\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} = \\boldsymbol{B}_{k,\\boldsymbol{\\xi}\\cup\\boldsymbol{\\xi}'}\\left(x\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi} \\cup \\boldsymbol{\\xi}'} \\quad \\forall x \\\\left[\\min\\left(\\boldsymbol{\\xi}\\right), \\max\\left(\\boldsymbol{\\xi} \\right) \\right]. \\] inserting singleton \\(\\xi'\\) \\(\\boldsymbol{\\xi},\\) \\[ \\boldsymbol{\\theta}_{\\boldsymbol{\\xi} \\cup \\xi'} = \\boldsymbol{W}_{k, \\boldsymbol{\\xi}}\\left(\\xi'\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} \\] \\(\\boldsymbol{W}_{k,\\boldsymbol{\\xi}}\\left(\\xi'\\right)\\) \\(\\left( \\left\\lvert \\boldsymbol{\\theta} \\right\\rvert + 1\\right) \\times \\left\\lvert \\boldsymbol{\\theta} \\right\\rvert\\) lower bi-diagonal matrix \\[ \\boldsymbol{W}_{k,\\boldsymbol{\\xi}}\\left(\\xi'\\right) = \\begin{pmatrix} 1 & 0 & \\cdots & 0 \\\\ 1 - \\omega_{1, k, \\boldsymbol{\\xi}}\\left(\\xi'\\right) & \\omega_{1, k, \\boldsymbol{\\xi}} \\left(\\xi'\\right) & \\cdots & 0 \\\\ 0 & 1 - \\omega_{2, k, \\boldsymbol{\\xi}}\\left(\\xi'\\right) & \\cdots 0 \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & 1 - \\omega_{\\left\\lvert \\boldsymbol{\\theta} \\right\\rvert - 1, k, \\boldsymbol{\\xi}} \\left(\\xi'\\right) & \\omega_{\\left\\lvert \\boldsymbol{\\theta} \\right\\rvert - 1, k, \\boldsymbol{\\xi}} \\left(\\xi'\\right) \\\\ 0 & 0 & 0 & 1 \\end{pmatrix}, \\] \\(\\omega_{j,k,\\boldsymbol{\\xi}}\\left(x\\right)\\) defined de~Boor recursive algorithm. recursion can insert many knots \\(\\boldsymbol{\\xi}\\) without changing value spline function. example, insert knot \\(\\xi' = 3\\) control polygon defined .","code":"cp1 <- insert_a_knot(cp0, xi_prime = 3) plot(cp0, cp1, color = TRUE, show_spline = TRUE)"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"assessing-influence-of-xi_j","dir":"Articles","previous_headings":"Knot Influence","what":"Assessing influence of \\(\\xi_j\\)","title":"Control Polygon Reduction","text":"derivate metric assessing much influence \\(\\xi_j \\\\boldsymbol{\\xi}\\) \\(\\boldsymbol{B}_{k,\\boldsymbol{\\xi}} \\left(x\\right)\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}.\\) Using relationship defined Boehm (1980), can derivate metric influence \\(\\xi_j\\) spline function. Start defined \\(k, \\boldsymbol{\\xi},\\) \\(\\boldsymbol{\\theta}_{k,\\boldsymbol{\\xi}}.\\) relationship \\[ \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} = \\boldsymbol{W}_{k,\\boldsymbol{\\xi}\\backslash\\xi_{j}}\\left(\\xi_{j}\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}\\backslash\\xi_{j}} \\] holds \\(\\xi_j\\) zero influence. However, practice, expect relationship \\[ \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} = \\boldsymbol{W}_{k,\\boldsymbol{\\xi}\\backslash\\xi_{j}}\\left(\\xi_{j}\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}\\backslash\\xi_{j}} + \\boldsymbol{d} \\] set deviations \\(\\boldsymbol{d}\\) equal \\(\\boldsymbol{0}\\) \\(\\xi_j\\) influence spline. can estimate \\(\\boldsymbol{d}\\) via least squares. simplify notation following drop subscripts parenthesis, , let \\(\\boldsymbol{W} = \\boldsymbol{W}_{k,\\boldsymbol{\\xi}\\backslash\\xi_{j}}\\left(\\xi_{j}\\right).\\) \\[ \\begin{align} \\boldsymbol{d} &= \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} - \\boldsymbol{W} \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}\\backslash\\xi_{j}} \\\\                &= \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} - \\boldsymbol{W} \\left(\\boldsymbol{W}^{T}\\boldsymbol{W}\\right)^{-1}\\boldsymbol{W}^{T}        \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} \\\\                &= \\left(\\boldsymbol{}                   - \\boldsymbol{W} \\left(\\boldsymbol{W}^{T}\\boldsymbol{W}\\right)^{-1}\\boldsymbol{W}^{T}\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} \\\\ \\end{align} \\] Finally, define influence \\(\\xi_j\\) \\(CP_{k,\\boldsymbol{\\xi},\\boldsymbol{\\theta}_{\\boldsymbol{\\xi}}}\\) \\[ w_j = \\left\\lVert \\boldsymbol{d} \\right\\rVert_{2}^{2}. \\] influence knots spline used section. Let’s look following plots explore influence \\(\\xi_{7}\\) (third interior knot \\(k=4\\) order spline) spline. panel () see original control polygon spline along coarsened control polygon spline. Note fewer control points, spline deviates original. panel (b) see restored control polygon result inserting \\(\\xi_7\\) coarsened control polygon panel (). plots also good example local support strong convexity control polygons \\(k + 1 = 5\\) control points impacted removal re-insertion \\(\\xi_7.\\) Lastly, panel (c) see three control polygons plotted together.  Next, consider influence \\(\\xi_8,\\) fourth interior knot. influence metric defined , least influential knot sequence. can seen easily spline original coarsened spline similar, despite apparent large difference magnitude control point ordinates original coarsened control polygons. However, re-inserting \\(\\xi_8\\) recovered control polygon similar original, hence low influence \\(\\xi_8.\\)  required omit internal knot, preferable omit \\(\\xi_8\\) \\(\\xi_5, \\xi_6, \\xi_7,\\) \\(\\xi_9\\) least impact spline approximation original functional form.","code":"x <- influence_of_iknots(cp0) summary(x) ##   j iknot  influence influence_rank ## 1 5   1.0 1.64661178              5 ## 2 6   1.5 0.29066719              2 ## 3 7   2.3 0.31205029              3 ## 4 8   4.0 0.07702981              1 ## 5 9   4.5 0.41987740              4 ggpubr::ggarrange(   ggpubr::ggarrange(       plot(x, j = 3, coarsened = TRUE, restored = FALSE, color = TRUE, show_spline = TRUE) +         ggplot2::theme(legend.position = \"none\")     , plot(x, j = 3, coarsened = FALSE, restored = TRUE, color = TRUE, show_spline = TRUE) +       ggplot2::theme(legend.position = \"none\")     , labels = c(\"(a)\", \"(b)\")     , nrow = 1   )   , plot(x, j = 3, coarsened = TRUE, restored = TRUE, color = TRUE, show_spline = TRUE) +     ggplot2::theme(legend.position = \"bottom\")   , labels = c(\"\", \"(c)\")   , nrow = 2   , ncol = 1   , heights = c(1, 2) ) ggpubr::ggarrange(   ggpubr::ggarrange(       plot(x, j = 4, coarsened = TRUE, restored = FALSE, color = TRUE, show_spline = TRUE) +         ggplot2::theme(legend.position = \"none\")     , plot(x, j = 4, coarsened = FALSE, restored = TRUE, color = TRUE, show_spline = TRUE) +       ggplot2::theme(legend.position = \"none\")     , labels = c(\"(a)\", \"(b)\")     , nrow = 1   )   , plot(x, j = 4, coarsened = TRUE, restored = TRUE, color = TRUE, show_spline = TRUE) +     ggplot2::theme(legend.position = \"bottom\")   , labels = c(\"\", \"(c)\")   , nrow = 2   , ncol = 1   , heights = c(1, 2) )"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"fitting-b-splines-to-noisy-data","dir":"Articles","previous_headings":"","what":"Fitting B-splines to noisy data","title":"Control Polygon Reduction","text":"Start spline using add noise .  fit spline control polygon noisy data use formula statement cp call. example use known internal knots add one extra.  plot shows fitted spline well approximating true spline function. Just make perfectly clear, regression coefficients estimates ordinates control polygon: Let’s now look influence internal knots fit least influential knot \\(\\xi_8 = 3.0,\\) extra knot inserted. Good, expected result. someone determine influence significant? , can test null hypothesis \\[H_0: w_{j} = 0\\] null hypothesis knot zero influence standard ordinary least squares regression assumptions regression coefficients, (ordinates control polygon regression coefficients), realisations Gaussian random variable. \\[ w_j = \\left(\\left(\\boldsymbol{} - \\boldsymbol{H}\\right)\\hat{\\boldsymbol{\\theta}} \\right)^{T} \\left[   \\left(\\left(\\boldsymbol{} - \\boldsymbol{H}\\right)\\hat{\\boldsymbol{\\theta}} \\right)   \\boldsymbol{\\Sigma}   \\left(\\left(\\boldsymbol{} - \\boldsymbol{H}\\right)\\hat{\\boldsymbol{\\theta}} \\right)^{T} \\right]^{+} \\left(\\left(\\boldsymbol{} - \\boldsymbol{H}\\right)\\hat{\\boldsymbol{\\theta}} \\right) \\] \\(\\boldsymbol{H} = W (W^{T}W)^{-1} W^{T},\\) \\(\\boldsymbol{\\Sigma}\\) variance-covariance matrix regression coefficients, \\(+\\) denotes Moore-Penrose inverse matrix. construction, \\(\\left(\\left(\\boldsymbol{} - \\boldsymbol{H}\\right)\\hat{\\boldsymbol{\\theta}} \\right) \\boldsymbol{\\Sigma} \\left(\\left(\\boldsymbol{} - \\boldsymbol{H}\\right)\\hat{\\boldsymbol{\\theta}} \\right)^{T}\\) singular thus standard inverse exist generalized inverse necessary. yields test statistic following chi-square distribution one degree freedom, \\[ w_j \\sim \\chi_{1}^{2}.\\] Now, interested removing knot lowest influence interested minimum. hypothesis test actually interested \\[ H_0: w_{(1)} = 0 \\] follows distribution \\[ \\Pr \\left[ w_{(1)} > w \\right] = \\sum_{j = 1}^{k+l} \\binom{n+l}{j} \\left(F_{\\chi_{1}^{2}}\\left(w\\right)\\right)^{j} \\left( 1 - F_{\\chi_{1}^{2}}\\left(w\\right) \\right)^{k+l-j}\\] \\(F_{\\chi_{1}^{2}}\\left(w\\right)\\) distribution function chi-square distribution one degree freedom. results generated calling influence_of_iknots. report two sets p-values. first p-value probability observed chisq value greater reported, second p-value probability rank order statistic exceeding observed value. worth remembering fraught binary classification statistical (non)significance can . Just p-value low mean knot influential, just high p-value dose mean knot influential. Sample size, -fitting, factors can/lead poor selection model consider p-values. said, consider \\(\\xi_9 = 4.0\\) lowest influence weight. Let’s omit knot refit model. omitting one knot refitting model see \\(\\xi = 2.3\\) least influential. Just fun, let’s omit knot, refit. Let’s continue process way zero knots. least influential knot second reduction \\(\\xi = 1.5\\) omited third reduction. Within third reduction, least influential knot \\(\\xi = 3.0\\) knot omitted fourth reduction. two remaining internal knots, \\(\\xi - 1.0\\) least influential omitted fifth reduciton. one knot can omitted fifth sixth reduciton. sixth reduction, zero internal knots, lets us compare model fits model just \\(k=4\\) order polynomial. Let’s compare fits. start looking control polygons splines.  control polygons, panel (), see sixth, fifth, fourth reductions different initial, first, second, third reductions, splines, fifth sixth reductions easily identified different. Next, graphic let us compare models truth, observed data.  dashed black line spline fitted data (light burgundy dots) true value target function burgundy line. fifth reduction easily noticeable difference fitted spline target function. initial control polygon first three reductions difficult visually discern meaningful difference fits. Thus, argue third reduction preferable model fewest degrees freedom providing good quality fit. conclusion supported looking residual standard error (rse) \\[ rse = \\sqrt{ \\frac{1}{df} \\sum_{=1}^{n} \\left(y_i - f\\left(x_i\\right)\\right)^2 },\\] degrees freedom, \\(df,\\) sample size \\(n\\) minus number regression paramters. wiggle one measure wiggliness defined \\[ \\int_{\\min\\left(\\boldsymbol{\\xi}\\right)}^{\\max\\left(\\boldsymbol{\\xi}\\right)} \\left( \\frac{d^2}{dx^2} f\\left(x\\right) \\right)^2 dx. \\] fdsc reports number times first derivative sign change.","code":"set.seed(42) x <- seq(0, 5.99999, length.out = 100) bmat <- bsplines(x, iknots = c(1, 1.5, 2.3, 4, 4.5), bknots = c(0, 6)) theta <- matrix(c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5), ncol = 1) DF <- data.frame(x = x, truth = as.numeric(bmat %*% theta)) DF$y <- as.numeric(bmat %*% theta + rnorm(nrow(bmat), sd = 0.3))  original_data_ggplot_layers <-   list(     ggplot2::geom_point(data = DF                         , mapping = ggplot2::aes(x = x, y = y)                         , inherit.aes = FALSE                         , color = \"#6F263D\"                         , alpha = 0.2)     ,     ggplot2::geom_line(data = DF                        , mapping = ggplot2::aes(x = x, y = truth)                        , inherit.aes = FALSE                        , color = \"#6F263D\"                        , alpha = 0.6)   )  ggplot2::ggplot(DF) + ggplot2::theme_bw() + original_data_ggplot_layers initial_cp <-   cp(y ~ bsplines(x, iknots = c(1, 1.5, 2.3, 3.0, 4, 4.5), bknots = c(0, 6))      , data = DF      , keep_fit = TRUE # default is FALSE   )  plot(initial_cp, show_spline = TRUE) + original_data_ggplot_layers initial_cp$fit |> coef() |> unname() ##  [1]  1.0032390  0.6730762  3.0035459  4.4136192  3.5386419  1.7539897 ##  [7] -0.4708520 -0.7312097  2.1631310  1.3575369 initial_cp$cp$theta ##  [1]  1.0032390  0.6730762  3.0035459  4.4136192  3.5386419  1.7539897 ##  [7] -0.4708520 -0.7312097  2.1631310  1.3575369 summary(influence_of_iknots(initial_cp)) ##    j iknot  influence influence_rank     chisq chisq_rank   p_value os_p_value ## 1  5   1.0 0.16235075              5 0.9100724          5 0.3400952 0.66205444 ## 2  6   1.5 0.05785223              3 0.4331666          2 0.5104392 0.11947108 ## 3  7   2.3 0.05128404              2 0.5061398          3 0.4768147 0.30134562 ## 4  8   3.0 0.08264093              4 0.8363492          4 0.3604430 0.37410640 ## 5  9   4.0 0.02585915              1 0.2230694          1 0.6367111 0.06662766 ## 6 10   4.5 0.39575696              6 2.6821030          6 0.1014816 0.47378677 initial_cp |>   influence_of_iknots() |>   summary() |>   knitr::kable(row.names = TRUE) first_reduction_cp <-   cp(y ~ bsplines(x, iknots = c(1, 1.5, 2.3, 3, 4.5), bknots = c(0, 6)), data = DF) first_reduction_cp |>   influence_of_iknots() |>   summary() |>   knitr::kable(row.names = TRUE) second_reduction_cp <-   cp(y ~ bsplines(x, iknots = c(1, 1.5, 3, 4.5), bknots = c(0, 6)), data = DF) second_reduction_cp |>   influence_of_iknots() |>   summary() |>   knitr::kable(row.names = TRUE) third_reduction_cp <-   cp(y ~ bsplines(x, iknots = c(1, 3, 4.5), bknots = c(0, 6)), data = DF) third_reduction_cp |>   influence_of_iknots() |>   summary() |>   knitr::kable(row.names = TRUE) fourth_reduction_cp <-   cp(y ~ bsplines(x, iknots = c(1, 4.5), bknots = c(0, 6)), data = DF) fourth_reduction_cp |>   influence_of_iknots() |>   summary() |>   knitr::kable(row.names = TRUE) fifth_reduction_cp <-   cp(y ~ bsplines(x, iknots = 4.5, bknots = c(0, 6)), data = DF) fifth_reduction_cp |>   influence_of_iknots() |>   summary() |>   knitr::kable(row.names = TRUE) sixth_reduction_cp <-   cp(y ~ bsplines(x, bknots = c(0, 6)), data = DF) sixth_reduction_cp |>   influence_of_iknots() |>   summary() ## no internal knots list(  initial_cp , first_reduction_cp , second_reduction_cp , third_reduction_cp      , fourth_reduction_cp , fifth_reduction_cp , sixth_reduction_cp) |>   rev() |>   lapply(summary) |>   do.call(what = rbind, args = _) |>   cbind(data.frame(reduction = seq(6, 0, by = -1))) |>   knitr::kable(row.names = TRUE)"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"control-polygon-reduction","dir":"Articles","previous_headings":"","what":"Control Polygon Reduction","title":"Control Polygon Reduction","text":"exercise manually identifying omitting knot smallest influence model tedious working large set initial knots. Fortunately, process automated. Calling cpr cpr_cp object defined function automatically omit internal knot lowest influence.","code":""},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"example-with-known-knots","dir":"Articles","previous_headings":"Control Polygon Reduction","what":"Example with known knots","title":"Control Polygon Reduction","text":"Apply CPR initial_cp example. 7 elements cpr_cpr object, length(initial_cp$iknots) + 1. indexing set \\(^{th}\\) element \\(-1\\) internal knots. exploring results, let’s just verify results call cpr manual results found . differences metadata objects, important parts, like control polygons, . manual process identified third_reduction_cp preferable model. cpr0 object can quickly see similar result manual process. additional columns summary, loglik_elbow rse_elbow, indicate location plot either loglik rse model index (degrees freedom) trade-additional degrees freedom improvement fix statistic negligible. See plot . determined finding breakpoint continuous, differentiable breakpoint, quadratic spline fits plot minimal residual standard error.","code":"cpr0 <- cpr(initial_cp) cpr0 ## A list of control polygons ## List of 7 ##  - attr(*, \"class\")= chr [1:2] \"cpr_cpr\" \"list\" all.equal( cpr0[[7]][[\"cp\"]],  initial_cp[[\"cp\"]]) ## [1] TRUE  # some attributes are different with the last cp due to how the automation # creates the call vs how the call was created manually. call_idx <- which(names(cpr0[[6]]) == \"call\") all.equal( cpr0[[6]][-call_idx], first_reduction_cp [-call_idx]) ## [1] TRUE all.equal( cpr0[[5]][-call_idx], second_reduction_cp[-call_idx]) ## [1] TRUE all.equal( cpr0[[4]][-call_idx], third_reduction_cp [-call_idx]) ## [1] TRUE all.equal( cpr0[[3]][-call_idx], fourth_reduction_cp[-call_idx]) ## [1] TRUE all.equal( cpr0[[2]][-call_idx], fifth_reduction_cp [-call_idx]) ## [1] TRUE all.equal( cpr0[[1]][-call_idx], sixth_reduction_cp [-call_idx], check.attributes = FALSE) ## [1] \"Component \\\"fit\\\": Component \\\"terms\\\": formulas differ in contents\" summary(cpr0) |> knitr::kable(row.names = TRUE) ggpubr::ggarrange(     plot(cpr0, type = \"cps\", color = TRUE)   , plot(cpr0, type = \"cps\", show_cp = FALSE, show_spline = TRUE, color = TRUE)   , plot(cpr0, type = \"loglik\")   , plot(cpr0, type = \"rse\")   , ncol =2   , nrow = 2   , common.legend = TRUE )"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"example-when-knots-are-unknown","dir":"Articles","previous_headings":"Control Polygon Reduction","what":"Example when knots are unknown","title":"Control Polygon Reduction","text":"practice extremely unlikely know knots placed. Analytic solutions difficult, impossible derive (Jupp 1978). However, optimal solution may necessary. de Boor (2001) (page 106)  “…B-spline doesn’t change much one changes \\(k+1\\) knots little bit. Therefore, one multiple knots, easy find B-spline almost like simple knots: Simply replace knot multiplicity \\(r > 1\\) \\(r\\) simple knots nearby.” , \\[   \\boldsymbol{B}_{k, \\boldsymbol{\\xi}}\\left(x\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi}} \\approx   \\boldsymbol{B}_{k, \\boldsymbol{\\xi'}}\\left(x\\right) \\boldsymbol{\\theta}_{\\boldsymbol{\\xi'}} \\] \\[ \\left\\lvert \\xi_j - \\xi_j' \\right\\rvert < \\delta \\quad \\text{small} \\quad \\delta > 0. \\] , case looking good set knots (good set knots parsimonious, provide good model fit) start initial knot sequence high cardinality, without precedent Eilers Marx (2010). apply CPR algorithm find good set knots. example use 50 internal knots. surprisingly fit “connect--dots” smooth fit.  Apply CPR initial_cp look summary. first 10 51 rows provided . , preferable model suggested index 5, model four internal knots. Inspection rse index plot, argue manual selection index 5 preferable overall.  Let’s compare models indices 3, 4, 5.  noticeable differences , part, located left side support 0 1. fifth index, change convexity spline. Knowing models index 3 4 good fits , easy select index 5 due extra “wiggle” spline. practice likely pick model index 4 smooth (small wiggle) low rse. Compare selected model original data.","code":"initial_cp <- cp(y ~ bsplines(x, df = 54, bknots = c(0, 6)), data = DF)  ggpubr::ggarrange(   plot(initial_cp, show_cp = TRUE, show_spline = FALSE) + original_data_ggplot_layers   ,   plot(initial_cp, show_cp = FALSE, show_spline = TRUE) + original_data_ggplot_layers ) cpr1 <- cpr(initial_cp) x <- summary(cpr1) knitr::kable(head(x, 10)) plot(cpr1, type = \"rse\") ggpubr::ggarrange(   plot(cpr1[[3]], cpr1[[4]], cpr1[[5]], show_cp = TRUE, show_spline = FALSE, color = TRUE)   ,   plot(cpr1[[3]], cpr1[[4]], cpr1[[5]], show_cp = FALSE, show_spline = TRUE, color = TRUE)   ,   common.legend = TRUE ) ggpubr::ggarrange(     plot(cpr1[[3]], show_cp = FALSE, show_spline = TRUE) +     ggplot2::ggtitle(\"Model Index 3\") +     original_data_ggplot_layers   , plot(cpr1[[4]], show_cp = FALSE, show_spline = TRUE) +     ggplot2::ggtitle(\"Model Index 4\") +     original_data_ggplot_layers   , plot(cpr1[[5]], show_cp = FALSE, show_spline = TRUE) +     ggplot2::ggtitle(\"Model Index 5\") +     original_data_ggplot_layers   , nrow = 1   , legend = \"none\" )"},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"extensions-to-higher-dimensions","dir":"Articles","previous_headings":"","what":"Extensions to higher dimensions","title":"Control Polygon Reduction","text":"CPR works uni-variable B-splines. taking tensor products B-splines, building control-net, higher-dimensional analog control polygon, can apply similar methods estimate surface. Details Control Net Reduction method presented ","code":"vignette(topic = \"cnr\", package = \"cpr\")"},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/articles/cpr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Control Polygon Reduction","text":"","code":"sessionInfo() ## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cpr_0.3.0.9000 qwraps2_0.6.0  ##  ## loaded via a namespace (and not attached): ##  [1] gtable_0.3.4      xfun_0.41         bslib_0.6.1       ggplot2_3.4.4     ##  [5] rstatix_0.7.2     lattice_0.21-9    vctrs_0.6.5       tools_4.3.2       ##  [9] generics_0.1.3    tibble_3.2.1      fansi_1.0.6       highr_0.10        ## [13] pkgconfig_2.0.3   Matrix_1.6-4      desc_1.4.3        lifecycle_1.0.4   ## [17] compiler_4.3.2    farver_2.1.1      stringr_1.5.1     textshaping_0.3.7 ## [21] munsell_0.5.0     carData_3.0-5     htmltools_0.5.7   sass_0.4.8        ## [25] yaml_2.3.8        pillar_1.9.0      pkgdown_2.0.7     car_3.1-2         ## [29] ggpubr_0.6.0      nloptr_2.0.3      jquerylib_0.1.4   tidyr_1.3.0       ## [33] MASS_7.3-60       cachem_1.0.8      boot_1.3-28.1     abind_1.4-5       ## [37] nlme_3.1-163      tidyselect_1.2.0  digest_0.6.33     stringi_1.8.3     ## [41] dplyr_1.1.4       purrr_1.0.2       labeling_0.4.3    splines_4.3.2     ## [45] cowplot_1.1.2     fastmap_1.1.1     grid_4.3.2        colorspace_2.1-0  ## [49] cli_3.6.2         magrittr_2.0.3    utf8_1.2.4        broom_1.0.5       ## [53] withr_2.5.2       scales_1.3.0      backports_1.4.1   rmarkdown_2.25    ## [57] lme4_1.1-35.1     gridExtra_2.3     ggsignif_0.6.4    ragg_1.2.7        ## [61] memoise_2.0.1     evaluate_0.23     knitr_1.45        rlang_1.1.2       ## [65] Rcpp_1.0.11       glue_1.6.2        minqa_1.2.6       jsonlite_1.8.8    ## [69] R6_2.5.1          systemfonts_1.0.5 fs_1.6.3"},{"path":"http://www.peteredewitt.com/cpr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter DeWitt. Author, maintainer. Samantha MaWhinney. Thesis advisor. Nichole Carlson. Thesis advisor.","code":""},{"path":"http://www.peteredewitt.com/cpr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"DeWitt P (2023). cpr: Control Polygon Reduction. R package version 0.3.0.9000, http://www.peteredewitt.com/cpr/, https://github.com/dewittpe/cpr/.","code":"@Manual{,   title = {cpr: Control Polygon Reduction},   author = {Peter DeWitt},   year = {2023},   note = {R package version 0.3.0.9000, http://www.peteredewitt.com/cpr/},   url = {https://github.com/dewittpe/cpr/}, }"},{"path":"http://www.peteredewitt.com/cpr/index.html","id":"cpr-control-polygon-reduction-","dir":"","previous_headings":"","what":"Control Polygon Reduction","title":"Control Polygon Reduction","text":"R package implementing Control Polygon Reduction model selection method. tasked modeling functional relationship response continuous predictor, .e., y = f(x), CPR allows quick efficient searching large model space find B-spline estimates function f(x). CPR extends multiple dimensions allows one find good locations knots tensor product B-splines.","code":""},{"path":"http://www.peteredewitt.com/cpr/index.html","id":"learn-more-about-cpr","dir":"","previous_headings":"","what":"Learn More About CPR.","title":"Control Polygon Reduction","text":"model selection method developed part Peter DeWitt’s PhD dissertation work.","code":""},{"path":"http://www.peteredewitt.com/cpr/index.html","id":"vignettes","dir":"","previous_headings":"Learn More About CPR.","what":"Vignettes","title":"Control Polygon Reduction","text":"one vignette included package, now. Additional details added vignette. Additional vignettes may also authored soon.","code":"vignette('cpr-pkg', package = 'cpr')"},{"path":"http://www.peteredewitt.com/cpr/index.html","id":"related-publications","dir":"","previous_headings":"Learn More About CPR.","what":"Related Publications:","title":"Control Polygon Reduction","text":"CPR method presented 28th International Biometric Conference held July 2016, Victoria, British Columbia, Canada. abstract, paper, talk title: “Parsimonious B-splines Regression Models via Control Polygon Reduction.” bibtex entry abstract: Awards: presentation work earned Peter DeWitt two awards: “Best Student Oral Presentation” International Biometric Society (IBS). “Distinguished Oral Presentation” part student paper competition hosted Western North American Region (WNAR) IBS.","code":"@inproceedings{,   author       = {DeWitt, Peter E. and Carlson, Nichole E. and Samantha MaWhinney},   title        = {Parsimonious B-spline Regression Models via Control Polygon Reduction},   booktitle    = {Abstracts for the XXVIIIth International Biometric Conference},   month        = {July},   year         = {2016},   organization = {International Biometric Society},   address      = {Victoria, British Columbia},   url          = {http://www.biometricsociety.org/conference-abstracts/2016/},   isbn         = {978-0-9821919-4-1} }"},{"path":"http://www.peteredewitt.com/cpr/index.html","id":"installing-cpr","dir":"","previous_headings":"","what":"Installing CPR","title":"Control Polygon Reduction","text":"Options installing CPR: 1. Install Comprehensive R Archive Network (CRAN) Install developmental version github. require remotes installed, , using Windows, ’ll need Rtools installed well. Clone repository use GNU make Go release page load cpr_<version>.tar.gz file version want install. Install command line Within R","code":"# within R install.packages(\"cpr\", repos = \"https://cran.rstudio.com\") remotes::install_github(\"dewittpe/cpr\", build_vignettes = TRUE) make install R CMD INSTALL cpr_<version>.tar.gz install.packages(<path_to_file>, repos = NULL, type=\"source\")"},{"path":"http://www.peteredewitt.com/cpr/index.html","id":"other-notes","dir":"","previous_headings":"","what":"Other Notes:","title":"Control Polygon Reduction","text":"cpr package provides 3D graphics via rgl package. get error, rather message, form: easy fix. need get FreeType 2 font engine. Debian, can get library via: FreeType 2 font engine installed computer must reinstall rgl package.","code":"font family \"sans\" not found, using \"bitmap\" apt-get install libfreetype6-dev"},{"path":"http://www.peteredewitt.com/cpr/reference/bsplineD.html","id":null,"dir":"Reference","previous_headings":"","what":"B-spline Derivatives — bsplineD","title":"B-spline Derivatives — bsplineD","text":"Generate first second derivatives B-spline Basis.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/bsplineD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"B-spline Derivatives — bsplineD","text":"","code":"bsplineD(   x,   iknots = NULL,   df = NULL,   bknots = range(x),   order = 4L,   derivative = 1L )"},{"path":"http://www.peteredewitt.com/cpr/reference/bsplineD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"B-spline Derivatives — bsplineD","text":"x numeric vector iknots internal knots df degrees freedom: sum order internal knots.  Ignored iknots specified. bknots boundary knot locations, defaults range(x). order order piecewise polynomials, defaults 4L. derivative, (integer) first second derivative","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/bsplineD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"B-spline Derivatives — bsplineD","text":"C. de Boor, \"practical guide splines. Revised Edition,\" Springer, 2001. H. Prautzsch, W. Boehm, M. Paluszny, \"Bezier B-spline Techniques,\" Springer, 2002.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/bsplineD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"B-spline Derivatives — bsplineD","text":"","code":"################################################################################ # Example 1 - pefectly fitting a cubic function f <- function(x) {   x^3 - 2 * x^2 - 5 * x + 6 }  fprime <- function(x) { # first derivatives of f(x)   3 * x^2 - 4 * x - 5 }  fdoubleprime <- function(x) { # second derivatives of f(x)   6 * x - 4 }  # Build a spline to fit bknots = c(-3, 5)  x     <- seq(-3, 4.999, length.out = 200) bmat  <- bsplines(x, bknots = bknots) theta <- matrix(coef(lm(f(x) ~ bmat + 0)), ncol = 1)  bmatD1 <- bsplineD(x, bknots = bknots, derivative = 1L) bmatD2 <- bsplineD(x, bknots = bknots, derivative = 2L)  # Verify that we have perfectly fitted splines to the function and its # derivatives. # check that the function f(x) is recovered all.equal(f(x), as.numeric(bmat %*% theta)) #> [1] TRUE all.equal(fprime(x), as.numeric(bmatD1 %*% theta)) #> [1] TRUE all.equal(fdoubleprime(x), as.numeric(bmatD2 %*% theta)) #> [1] TRUE  # Plot the results old_par <- par() par(mfrow = c(1, 3)) plot(x, f(x), type = \"l\", main = bquote(f(x)), ylab = \"\", xlab = \"\") points(x, bmat %*% theta, col = 'blue') grid()  plot(x, fprime(x), type = \"l\", main = bquote(frac(d,dx)~f(x)), ylab = \"\", xlab = \"\") points(x, bmatD1 %*% theta, col = 'blue') grid()  plot(x, fdoubleprime(x), type = \"l\", main = bquote(frac(d^2,dx^2)~f(x)), ylab = \"\", xlab = \"\") points(x, bmatD2 %*% theta, col = 'blue') grid()   par(old_par) #> Warning: graphical parameter \"cin\" cannot be set #> Warning: graphical parameter \"cra\" cannot be set #> Warning: graphical parameter \"csi\" cannot be set #> Warning: graphical parameter \"cxy\" cannot be set #> Warning: graphical parameter \"din\" cannot be set #> Warning: graphical parameter \"page\" cannot be set  ################################################################################ # Example 2 set.seed(42)  xvec <- seq(0.1, 9.9, length = 1000) iknots <- sort(runif(rpois(1, 3), 1, 9)) bknots <- c(0, 10)  # basis matrix and the first and second derivatives thereof, for cubic (order = # 4) b-splines bmat  <- bsplines(xvec, iknots, bknots = bknots) bmat1 <- bsplineD(xvec, iknots, bknots = bknots, derivative = 1) bmat2 <- bsplineD(xvec, iknots, bknots = bknots, derivative = 2)  # control polygon ordinates theta <- runif(length(iknots) + 4L, -5, 5)  # plot data plot_data <-   data.frame(Spline            = as.numeric(bmat %*% theta),              First_Derivative  = as.numeric(bmat1 %*% theta),              Second_Derivative = as.numeric(bmat2 %*% theta)) plot_data <- stack(plot_data) plot_data <- cbind(plot_data, data.frame(x = xvec))  ggplot2::ggplot(plot_data) + ggplot2::theme_bw() + ggplot2::aes(x = x, y = values, color = ind) + ggplot2::geom_line() + ggplot2::geom_hline(yintercept = 0) + ggplot2::geom_vline(xintercept = iknots, linetype = 3)"},{"path":"http://www.peteredewitt.com/cpr/reference/bsplines.html","id":null,"dir":"Reference","previous_headings":"","what":"B-Splines — bsplines","title":"B-Splines — bsplines","text":"implementation Carl de Boor's recursive algorithm building B-splines.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/bsplines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"B-Splines — bsplines","text":"","code":"bsplines(x, iknots = NULL, df = NULL, bknots = range(x), order = 4L)"},{"path":"http://www.peteredewitt.com/cpr/reference/bsplines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"B-Splines — bsplines","text":"x numeric vector iknots internal knots df degrees freedom: sum order internal knots.  Ignored iknots specified. bknots boundary knot locations, defaults range(x). order order piecewise polynomials, defaults 4L.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/bsplines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"B-Splines — bsplines","text":"several differences function bs. important difference two methods treat right-hand end support.  bs uses pivot method allow extrapolation thus returns basis matrix non-zero values exist max(Boundary.knots) (bs version bsplines's bknots).  bsplines use strict definition splines support open right hand side, , bsplines return right-continuous functions. Additioanlly, attributes object returned bsplines different attributes object returned bs. See vignette(topic = \"cpr\", package = \"cpr\") detailed comparison bsplines bs calls notes B-splines general.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/bsplines.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"B-Splines — bsplines","text":"C. de Boor, \"practical guide splines. Revised Edition,\" Springer, 2001. H. Prautzsch, W. Boehm, M. Paluszny, \"Bezier B-spline Techniques,\" Springer, 2002.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/bsplines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"B-Splines — bsplines","text":"","code":"# build a vector of values to transform xvec <- seq(-3, 4.9999, length = 100)  # cubic b-spline bmat <- bsplines(xvec, iknots = c(-2, 0, 1.2, 1.2, 3.0), bknots = c(-3, 5)) bmat #> Basis matrix dims: [100 x 9] #> Order: 4 #> Number of internal knots: 5 #>  #> First 6 rows: #>  #>           [,1]      [,2]        [,3]         [,4] [,5] [,6] [,7] [,8] [,9] #> [1,] 1.0000000 0.0000000 0.000000000 0.000000e+00    0    0    0    0    0 #> [2,] 0.7766405 0.2170642 0.006253393 4.187719e-05    0    0    0    0    0 #> [3,] 0.5892937 0.3864632 0.023908015 3.350175e-04    0    0    0    0    0 #> [4,] 0.4347939 0.5127699 0.051305529 1.130684e-03    0    0    0    0    0 #> [5,] 0.3099750 0.6005573 0.086787597 2.680140e-03    0    0    0    0    0 #> [6,] 0.2116711 0.6543984 0.128695884 5.234649e-03    0    0    0    0    0  # plot the splines plot(bmat)                # each spline will be colored by default  plot(bmat, color = FALSE) # black and white plot  plot(bmat, color = FALSE) + ggplot2::aes(linetype = spline) # add a linetype   # Axes # The x-axis, by default, show the knot locations.  Other options are numeric # values, and/or to use a second x-axis  plot(bmat, show_xi = TRUE,  show_x = FALSE) # default, knot, symbols, on lower axis  plot(bmat, show_xi = FALSE, show_x = TRUE)  # Numeric value for the knot locations  plot(bmat, show_xi = TRUE,  show_x = TRUE)  # symbols on bottom, numbers on top   # quadratic splines bmat <- bsplines(xvec, iknots = c(-2, 0, 1.2, 1.2, 3.0), order = 3L) #> Warning: At least one x value >= max(bknots) bmat #> Basis matrix dims: [100 x 8] #> Order: 3 #> Number of internal knots: 5 #>  #> First 6 rows: #>  #>           [,1]      [,2]        [,3] [,4] [,5] [,6] [,7] [,8] #> [1,] 1.0000000 0.0000000 0.000000000    0    0    0    0    0 #> [2,] 0.8449156 0.1529078 0.002176594    0    0    0    0    0 #> [3,] 0.7028908 0.2884028 0.008706377    0    0    0    0    0 #> [4,] 0.5739256 0.4064850 0.019589348    0    0    0    0    0 #> [5,] 0.4580200 0.5071545 0.034825508    0    0    0    0    0 #> [6,] 0.3551739 0.5904113 0.054414856    0    0    0    0    0 plot(bmat) + ggplot2::ggtitle(\"Quadratic B-splines\")"},{"path":"http://www.peteredewitt.com/cpr/reference/btensor.html","id":null,"dir":"Reference","previous_headings":"","what":"btensor — btensor","title":"btensor — btensor","text":"Tensor products B-splines.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/btensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"btensor — btensor","text":"","code":"btensor(x, df = NULL, iknots = NULL, bknots, order)"},{"path":"http://www.peteredewitt.com/cpr/reference/btensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"btensor — btensor","text":"x list variables build B-spline transforms .  tensor product B-splines returned. df degrees freedom.  list degrees freedom marginal. iknots list internal knots x.  omitted, default place internal knots x.  specified, list needs contain internal knots x.  df iknots given, df take precedence. bknots list boundary knots x.  iknots, omitted default use range x.  specified, use must specify bknots x. order list order x; defaults 4L x.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/btensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"btensor — btensor","text":"matrix class cpr_bt","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/btensor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"btensor — btensor","text":"return form function tensor product B-splines transformations given variables.  Say variables X, Y, Z build tensor product .  columns returned matrix correspond column products three B-splines: x1y1z1 x2y1z1 x3y1z1 x4y1z1 x1y2z1 x2y2z1 ... x4y4z4 three fourth order B-splines internal knots.  columns X cycle quickest, followed Y, Z.  result  model.matrix( ~ bsplines(X) : bsplines(Y) : bsplines(Z) + 0) . See vignette(topic = \"cnr\", package = \"cpr\") details.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/btensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"btensor — btensor","text":"","code":"tp <- with(mtcars,            btensor(x = list(d = disp, h = hp, m = mpg),                    iknots = list(numeric(0), c(100, 150), numeric(0)))            ) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) tp #> Tensor Product Matrix dims: [32 x 96] #>  #>  'cpr_bt' num [1:32, 1:96] 0 0 0.000245 0 0 ... #>  - attr(*, \"bspline_list\")=List of 3 #>  - attr(*, \"call\")= language btensor(x = list(d = disp, h = hp, m = mpg), iknots = list(numeric(0),      c(100, 150), numeric(0))) #>  - attr(*, \"environment\")=<environment: 0x561a7c914040>"},{"path":"http://www.peteredewitt.com/cpr/reference/build_tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Tensor — build_tensor","title":"Build Tensor — build_tensor","text":"Tensor products Matrices.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/build_tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Tensor — build_tensor","text":"","code":"build_tensor(x = NULL, y = NULL, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/build_tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Tensor — build_tensor","text":"x matrix y matrix ... additional numeric matrices build tensor product","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/build_tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Tensor — build_tensor","text":"matrix matrix","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/build_tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Tensor — build_tensor","text":"","code":"A <- matrix(1:4, nrow = 10, ncol = 20) B <- matrix(1:6, nrow = 10, ncol = 6)  # Two ways of building the same tensor product tensor1 <- build_tensor(A, B) tensor2 <- do.call(build_tensor, list(A, B)) all.equal(tensor1, tensor2) #> [1] TRUE  # a three matrix tensor product tensor3 <- build_tensor(A, B, B) str(tensor3) #>  num [1:10, 1:720] 1 8 27 64 25 72 3 16 9 32 ..."},{"path":"http://www.peteredewitt.com/cpr/reference/cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Nets — cn","title":"Control Nets — cn","text":"Generate control net uni-variable B-spline","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Nets — cn","text":"","code":"cn(x, ...)  # S3 method for cpr_bt cn(x, theta, ...)  # S3 method for formula cn(   formula,   data,   method = stats::lm,   method.args = list(),   keep_fit = TRUE,   check_rank = TRUE,   ... )  # S3 method for cpr_cn print(x, ...)  # S3 method for cpr_cn summary(object, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Nets — cn","text":"x cpr_bt object ... pass theta vector (regression) coefficients, ordinates control net. formula formula appropriate regression method used. data required data.frame method regression method lm, glm, lmer, etc. method.args list additional arguments pass regression method. keep_fit (logical, defaults FALSE).  TRUE regression model fit retained returned fit element. FALSE regression model saved fit element NA. check_rank (logical, defaults TRUE) TRUE check design matrix full rank. object cpr_cn object","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Nets — cn","text":"cpr_cn object.  list following elements. elements omitted using cn.cpr_bt method. cn control net, data.frame row defining vertex  control net bspline_list list marginal B-splines call call keep_fit logical, indicates regression models retained fit isTRUE(keep_fit) regression model ,  else NA. coefficients regression coefficients, fixed effects  mixed effects model used. vcov variance-covariance matrix coefficients loglik log-likelihood regression model rse residual standard error regression models","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control Nets — cn","text":"cn generates control net given B-spline function.  several methods building control net.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Net Reduction — cnr","title":"Control Net Reduction — cnr","text":"Run Control Net Reduction Algorithm.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Net Reduction — cnr","text":"","code":"cnr(x, margin, n_polycoef = 20L, progress = interactive(), ...)  # S3 method for cpr_cnr summary(object, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/cnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Net Reduction — cnr","text":"x cnr_cn object margin margins apply CNR algorithm .  Passed influence_weights. n_polycoef number polynomial coefficients use assessing influence internal knot. progress show progress bar. ... currently used object cpr_cnr object","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cnr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control Net Reduction — cnr","text":"cnr runs control net reduction algorithm. keep keep regression fit part cnr\\_cp object models including keep fits.  example, keep = 10 resulting cnr\\_cnr object regression fit stored first keep + 1 (zero internal knots, one internal knot, ..., keep internal knots) cnr\\_cp objects list.  limit number stored regression fits keep memory usage .","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/cnr_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Net Reduction Plots — plot.cpr_cnr","title":"Control Net Reduction Plots — plot.cpr_cnr","text":"collection function inspection evaluation control polygon reduction.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cnr_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Net Reduction Plots — plot.cpr_cnr","text":"","code":"# S3 method for cpr_cnr plot(x, type = \"rse\", from = 1, to, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/cnr_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Net Reduction Plots — plot.cpr_cnr","text":"x cpr_cnr object type type diagnostic plot. \"loglik\" log likelihood degrees freedom, \"rse\" residual standard error model index first index x plot last index x plot ... ignored","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/coef_vcov.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Regression Coefficients for B-Splines and Tensor Products of B-splines — coef_vcov","title":"Extract Regression Coefficients for B-Splines and Tensor Products of B-splines — coef_vcov","text":"S3 method extracting regression coefficients bsplines btensor terms.  Default uses stats::coef extract regression coefficients.  specific method lmerMod objects provided.  using regression method stats::coef return regression coefficients, need define S3 method stats::coef .","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/coef_vcov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Regression Coefficients for B-Splines and Tensor Products of B-splines — coef_vcov","text":"","code":"coef_vcov(fit)"},{"path":"http://www.peteredewitt.com/cpr/reference/coef_vcov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Regression Coefficients for B-Splines and Tensor Products of B-splines — coef_vcov","text":"fit regression model fit","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/coef_vcov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Regression Coefficients for B-Splines and Tensor Products of B-splines — coef_vcov","text":"list four elements theta theta regression coefficients coef regression cofficients vcov_theta subsection variance-covariance matrix pertaining theta values vcov full variance-covariance matrix","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/coef_vcov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Regression Coefficients for B-Splines and Tensor Products of B-splines — coef_vcov","text":"functions called cp cn calls.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/cp.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Polygons — cp","title":"Control Polygons — cp","text":"Generate control polygon uni-variable B-spline","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Polygons — cp","text":"","code":"cp(x, ...)  # S3 method for cpr_bs cp(x, theta, ...)  # S3 method for formula cp(   formula,   data,   method = stats::lm,   method.args = list(),   keep_fit = TRUE,   check_rank = TRUE,   ... )  # S3 method for cpr_cp print(x, ...)  # S3 method for cpr_cp summary(object, wiggle = TRUE, integrate.args = list(), ...)  # S3 method for cpr_cp plot(   x,   ...,   comparative,   show_cp = TRUE,   show_spline = FALSE,   show_xi = TRUE,   color = FALSE,   n = 100,   show_x = FALSE,   digits = 2 )"},{"path":"http://www.peteredewitt.com/cpr/reference/cp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Polygons — cp","text":"x cpr_bs object ... pass theta vector (regression) coefficients, ordinates control polygon. formula formula appropriate regression method used. data required data.frame method regression method lm, glm, lmer, etc. method.args list additional arguments pass regression method. keep_fit (logical, default value TRUE).  TRUE regression model fit retained returned fit element. FALSE fit element NA. check_rank (logical, defaults TRUE) TRUE check design matrix full rank. object cpr_cp object wiggle logical, TRUE integral squared second derivative spline function calculated via integrate. integrate.args list arguments passed wiggle ultimately integrate. comparative TRUE use color distinquish one spline another, FALSE color highight control polygon spline different colors, plot knots way plot.cpr_bs .  missing, default TRUE one cpr_cp object passed , FALSE one cpr_cp object passed. show_cp logical (default TRUE), show control polygon(s)? show_spline logical (default FALSE) plot spline function? show_xi logical (default TRUE) use geom_rug show location knots respective control polygons. color Boolean (default FALSE) one cpr_cp object plotted, set value TRUE graphic color (line types used regardless color setting). n number data points use plotting spline show_x boolean, x-values digits number digits right decimal place report value knot. used plotting control polygon comparative = FALSE.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Polygons — cp","text":"ggplot","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control Polygons — cp","text":"cp generates control polygon given B-spline function.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Polygons — cp","text":"","code":"# Support xvec <- runif(n = 500, min = 0, max = 6) bknots <- c(0, 6)  # Define the basis matrix bmat1 <- bsplines(x = xvec, iknots = c(1, 1.5, 2.3, 4, 4.5), bknots = bknots) bmat2 <- bsplines(x = xvec, bknots = bknots)  # Define the control vertices ordinates theta1 <- c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5) theta2 <- c(1, 3.4, -2, 1.7)  # build the two control polygons cp1 <- cp(bmat1, theta1) cp2 <- cp(bmat2, theta2)  # black and white plot plot(cp1)  plot(cp1, show_spline = TRUE)   # multiple control polygons plot(cp1, cp2, show_spline = TRUE)  plot(cp1, cp2, color = TRUE)  plot(cp1, cp2, show_spline = TRUE, color = TRUE)   # via formula DF  <- data.frame(x = xvec, y = sin((xvec - 2)/pi) + 1.4 * cos(xvec/pi)) cp3 <- cp(y ~ bsplines(x, bknots = bknots), data = DF)  # plot the spline and target data. plot(cp3, show_cp = FALSE, show_spline = TRUE) +   ggplot2::geom_line(mapping = ggplot2::aes(x = x, y = y, color = \"Target\"),                      data = DF, linetype = 2)    x <- seq(0, 6, length = 500) bmat <- bsplines(x, iknots = c(1, 1.5, 2.3, 4, 4.5)) #> Warning: At least one x value >= max(bknots) theta1 <- matrix(c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5), ncol = 1) theta2 <- theta1 + c(-0.15, -1.01, 0.37, 0.19, -0.53, -0.84, -0.19, 1.15, 0.17) cp1 <- cp(bmat, theta1) cp2 <- cp(bmat, theta2)  # compare two control polygons on one plot plot(cp1, cp2)  plot(cp1, cp2, color = TRUE)  plot(cp1, cp2, color = TRUE, show_spline = TRUE)  plot(cp1, cp2, color = TRUE, show_cp = FALSE, show_spline = TRUE)   # Show one control polygon with knots on the axis instead of the rug and # color/linetype for the control polygon and spline, instead of different # control polygons plot(cp1, comparative = FALSE)  plot(cp1, comparative = FALSE, show_spline = TRUE)  plot(cp1, comparative = FALSE, show_spline = TRUE, show_x = TRUE)  plot(cp2, comparative = FALSE, show_spline = TRUE, show_x = TRUE)"},{"path":"http://www.peteredewitt.com/cpr/reference/cp_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Polygon Diagnostics — cp_value","title":"Control Polygon Diagnostics — cp_value","text":"Collection functions inspection analysis control polygons","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Polygon Diagnostics — cp_value","text":"","code":"cp_value(obj, x)  cp_diff(cp1, cp2)"},{"path":"http://www.peteredewitt.com/cpr/reference/cp_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Polygon Diagnostics — cp_value","text":"obj cpr_cp object data.frame first column abscissa second column ordinate control polygon vertices. x abscissa determine ordinate control polygon cp cp1 cpr_cp object cp2 cpr_cp object","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Polygon Diagnostics — cp_value","text":"cp_value returns ordinate control polygon line segment abscissa x given.  x control vertex line segment defined two control vertices control polygon provided. cp_diff returns vertical distance control vertices cp1 control polygon cp2.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cp_diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Polygon Diagnostics — cp_value","text":"","code":"xvec <- seq(0, 6, length = 500)  # Define the basis matrix bmat1 <- bsplines(x = xvec, iknots = c(1, 1.5, 2.3, 4, 4.5)) #> Warning: At least one x value >= max(bknots) bmat2 <- bsplines(x = xvec) #> Warning: At least one x value >= max(bknots)  # Define the control vertices ordinates theta1 <- c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5) theta2 <- c(1, 3.4, -2, 1.7)  # build the two control polygons cp1 <- cp(bmat1, theta1) cp2 <- cp(bmat2, theta2)  x <- c(0.2, 0.8, 1.3, 1.73, 2.15, 3.14, 4.22, 4.88, 5.3, 5.9) cp_value(cp1, x = x) #>  [1]  0.4000000  3.2666667  3.9260870  4.1350000  3.9250000  1.4320000 #>  [7] -0.6005405 -0.5110000  1.1900000  1.6000000  df <- data.frame(x = x, y = cp_value(cp1, x = x))  plot(cp1, show_x = TRUE, show_spline = TRUE) + ggplot2::geom_point(data = df   , mapping = ggplot2::aes(x = x, y = y)   , color = \"red\"   , shape = 4   , size = 3   , inherit.aes = FALSE)    # cp diff  cp_diff(cp1, cp2) #> [1]  0.0000000  1.4000000 -1.5000000 -1.2800000 -1.9200000 -0.4200000  0.2416667 #> [8] -1.2250000  0.2000000  df <- data.frame(x = cp1$cp$xi_star,                  y = cp1$cp$theta,                  yend = cp1$cp$theta + cp_diff(cp1, cp2))   plot(cp1, cp2) + ggplot2::geom_segment(data = df   , mapping = ggplot2::aes(x = x, xend = x, y = y, yend = yend)   , color = \"red\"   , inherit.aes = FALSE)"},{"path":"http://www.peteredewitt.com/cpr/reference/cpr-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct Functions — cpr-defunct","title":"Defunct Functions — cpr-defunct","text":"major refactor package v0.3.0 v.0.4.0 took place many functions made defunct.  refactor extensive moving functions deprecated viable option.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct Functions — cpr-defunct","text":"","code":"refine_ordinate(...)  coarsen_ordinate(...)  hat_ordinate(...)  insertion_matrix(...)  wiegh_iknots(...)  influence_of(...)  influence_weights(...)"},{"path":"http://www.peteredewitt.com/cpr/reference/cpr-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defunct Functions — cpr-defunct","text":"... pass ","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cpr: Control Polygon Reduction — cpr-package","title":"cpr: Control Polygon Reduction — cpr-package","text":"cpr package implements control polygon reduction control net reduction methods finding parsimonious B-spline regression models described DeWitt (2017).","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"cpr: Control Polygon Reduction — cpr-package","text":"DeWitt, Peter Edward. “Parsimonious B-spline regression models via control polygon control net reduction identifying factors explaining variation daily hormone profiles menopausal transition.” (2017).","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/cpr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cpr: Control Polygon Reduction — cpr-package","text":"Maintainer: Peter DeWitt dewittpe@gmail.com (ORCID) contributors: Samantha MaWhinney sam.mawhinney@ucdenver.edu [thesis advisor] Nichole Carlson nichole.carlson@ucdenver.edu [thesis advisor]","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Polygon Reduction — cpr","title":"Control Polygon Reduction — cpr","text":"Run Control Polygon Reduction Algorithm.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Polygon Reduction — cpr","text":"","code":"cpr(x, progress = interactive(), ...)  # S3 method for cpr_cpr summary(object, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/cpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Polygon Reduction — cpr","text":"x cpr_cp object progress show progress bar. ... currently used object cpr_cpr object","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control Polygon Reduction — cpr","text":"cpr runs control polygon reduction algorithm.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Polygon Reduction — cpr","text":"","code":"############################################################################# # Example 1: find a model for log10(pdg) = f(day) from the spdg data set if (FALSE) { # need the lme4 package to fit a mixed effect model require(lme4)  # construct the initial control polygon.  Forth order spline with fifty # internal knots.  Remember degrees of freedom equal the polynomial order # plus number of internal knots. init_cp <- cp(log10(pdg) ~ bsplines(day, df = 54, bknots = c(-1, 1)) + (1|id),               data = spdg, method = lme4::lmer) cpr_run <- cpr(init_cp) plot(cpr_run, color = TRUE) plot(cpr_run, type = \"rse\")  summary(cpr_run)  # preferable model is in index 5 preferable_cp <- cpr_run[[5]] }  ############################################################################# # Example 2: logistic regression # simulate a binary response Pr(y = 1 | x) = p(x) p <- function(x) { 0.65 * sin(x * 0.70) + 0.3 * cos(x * 4.2) }  set.seed(42) x <- runif(2500, 0.00, 4.5) sim_data <- data.frame(x = x, y = rbinom(2500, 1, p(x)))  # Define the initial control polygon init_cp <- cp(formula = y ~ bsplines(x, df = 54, bknots = c(0, 4.5)),               data    = sim_data,               method  = glm,               method.args = list(family  = binomial())               )  # run CPR, preferable model is in index 7 cpr_run <- cpr(init_cp)  summary(cpr_run) #>    dfs n_iknots       iknots    loglik      rss       rse       wiggle fdsc #> 1    4        0              -1524.367 3048.735 1.1051914 5.670049e+00    1 #> 2    5        1 0.729119.... -1471.933 2943.866 1.0862349 8.075067e+02    2 #> 3    6        2 0.650666.... -1445.352 2890.703 1.0765979 1.468561e+03    4 #> 4    7        3 0.650666.... -1444.725 2889.451 1.0765805 1.244232e+03    4 #> 5    8        4 0.650666.... -1318.146 2636.293 1.0285438 9.081719e+03    6 #> 6    9        5 0.587696.... -1300.001 2600.002 1.0216449 1.841409e+04    7 #> 7   10        6 0.587696.... -1256.983 2513.965 1.0048008 2.793707e+04    8 #> 8   11        7 0.587696.... -1255.741 2511.483 1.0045063 2.735703e+04    8 #> 9   12        8 0.587696.... -1255.228 2510.456 1.0045028 2.695608e+04    8 #> 10  13        9 0.587696.... -1252.228 2504.456 1.0035034 6.658738e+04    8 #> 11  14       10 0.587696.... -1251.154 2502.309 1.0032747 1.566095e+05    8 #> 12  15       11 0.587696.... -1249.133 2498.266 1.0026657 2.533185e+05   11 #> 13  16       12 0.587696.... -1243.738 2487.476 1.0006995 1.053843e+06   12 #> 14  17       13 0.328569.... -1243.630 2487.260 1.0008574 1.057876e+06   10 #> 15  18       14 0.328569.... -1242.974 2485.948 1.0007950 1.194616e+06   11 #> 16  19       15 0.328569.... -1239.805 2479.611 0.9997200 1.811530e+06   15 #> 17  20       16 0.249212.... -1238.228 2476.456 0.9992852 3.120671e+06   16 #> 18  21       17 0.249212.... -1238.225 2476.449 0.9994854 3.415695e+06   16 #> 19  22       18 0.249212.... -1237.759 2475.518 0.9994991 4.376128e+06   16 #> 20  23       19 0.249212.... -1234.025 2468.050 0.9981917 4.775024e+06   16 #> 21  24       20 0.249212.... -1233.591 2467.183 0.9982179 4.949395e+06   16 #> 22  25       21 0.249212.... -1233.559 2467.118 0.9984064 4.936030e+06   16 #> 23  26       22 0.249212.... -1230.769 2461.538 0.9974782 5.285301e+06   20 #> 24  27       23 0.249212.... -1230.068 2460.136 0.9973956 5.376343e+06   22 #> 25  28       24 0.249212.... -1230.026 2460.053 0.9975806 4.435994e+06   22 #> 26  29       25 0.249212.... -1228.749 2457.498 0.9972641 6.731999e+06   22 #> 27  30       26 0.249212.... -1228.719 2457.437 0.9974537 6.772837e+06   22 #> 28  31       27 0.249212.... -1228.492 2456.984 0.9975637 6.896918e+06   22 #> 29  32       28 0.249212.... -1228.080 2456.161 0.9975986 6.678374e+06   24 #> 30  33       29 0.249212.... -1225.369 2450.738 0.9966986 7.374691e+06   26 #> 31  34       30 0.249212.... -1225.204 2450.407 0.9968335 8.134362e+06   26 #> 32  35       31 0.249212.... -1223.760 2447.521 0.9964482 9.739136e+06   28 #> 33  36       32 0.249212.... -1223.585 2447.170 0.9965789 9.599515e+06   28 #> 34  37       33 0.249212.... -1221.897 2443.795 0.9960936 1.053703e+07   30 #> 35  38       34 0.249212.... -1221.672 2443.344 0.9962041 1.072229e+07   30 #> 36  39       35 0.249212.... -1221.223 2442.446 0.9962232 1.081025e+07   32 #> 37  40       36 0.249212.... -1221.206 2442.412 0.9964187 1.078691e+07   32 #> 38  41       37 0.249212.... -1220.555 2441.109 0.9963555 1.086991e+07   36 #> 39  42       38 0.077664.... -1220.425 2440.851 0.9965055 1.074457e+07   36 #> 40  43       39 0.077664.... -1220.246 2440.492 0.9966350 1.111247e+07   38 #> 41  44       40 0.077664.... -1220.161 2440.322 0.9968031 1.090847e+07   38 #> 42  45       41 0.077664.... -1220.109 2440.217 0.9969848 1.194348e+07   38 #> 43  46       42 0.077664.... -1219.814 2439.627 0.9970673 1.318852e+07   38 #> 44  47       43 0.077664.... -1219.373 2438.747 0.9970905 1.319868e+07   38 #> 45  48       44 0.077664.... -1219.208 2438.415 0.9972260 1.321556e+07   38 #> 46  49       45 0.077664.... -1219.052 2438.103 0.9973656 1.323116e+07   38 #> 47  50       46 0.077664.... -1218.831 2437.661 0.9974787 1.324242e+07   38 #> 48  51       47 0.077664.... -1218.811 2437.622 0.9976742 1.323149e+07   38 #> 49  52       48 0.077664.... -1218.801 2437.602 0.9978740 1.323166e+07   38 #> 50  53       49 0.077664.... -1218.797 2437.594 0.9980761 1.323104e+07   38 #> 51  54       50 0.077664.... -1218.796 2437.592 0.9982798 1.323654e+07   38 #>    Pr(>w_(1)) loglik_elbow rse_elbow #> 1          NA                        #> 2  < 2.22e-16                        #> 3  < 2.22e-16                        #> 4  0.01806100                        #> 5  < 2.22e-16                        #> 6  < 2.22e-16                        #> 7  < 2.22e-16                        #> 8  4.0749e-07                        #> 9  0.00010329                        #> 10 1.4766e-14                        #> 11 1.4394e-08          <<<       <<< #> 12 1.7764e-15                        #> 13 < 2.22e-16                        #> 14 0.00304633                        #> 15 3.8724e-07                        #> 16 1.4433e-15                        #> 17 < 2.22e-16                        #> 18 0.31997338                        #> 19 2.2690e-07                        #> 20 2.7955e-08                        #> 21 9.2284e-09                        #> 22 0.00896420                        #> 23 8.3824e-10                        #> 24 3.2263e-10                        #> 25 0.00190991                        #> 26 2.1002e-11                        #> 27 0.00360729                        #> 28 8.2562e-08                        #> 29 1.2764e-12                        #> 30 1.0369e-13                        #> 31 3.9331e-08                        #> 32 2.2204e-16                        #> 33 6.0272e-09                        #> 34 < 2.22e-16                        #> 35 6.3091e-11                        #> 36 < 2.22e-16                        #> 37 0.00337528                        #> 38 < 2.22e-16                        #> 39 8.0105e-09                        #> 40 7.1681e-11                        #> 41 1.5716e-07                        #> 42 6.3048e-06                        #> 43 7.1808e-08                        #> 44 4.7848e-08                        #> 45 5.5929e-08                        #> 46 5.0250e-08                        #> 47 3.4693e-08                        #> 48 0.00031470                        #> 49 0.00361281                        #> 50 0.02308096                        #> 51 0.18953185                         plot(cpr_run, color = TRUE, type = \"rse\")  plot(cpr_run, color = TRUE, from = 5, to = 9, show_spline = TRUE) #> Error in eval(parse(text = paste(\"plot(\", paste(paste0(nm, \"[[\", seq(from = from,     to = to, by = 1), \"]]\"), collapse = \", \"), \", ...)\"))): object 'cpr_run' not found  # plot the fitted spline and the true p(x) sim_data$pred_select_p <- plogis(predict(cpr_run[[7]], newdata = sim_data)) #> $object #>  #> Call:  (function (formula, family = gaussian, data, weights, subset,  #>     na.action, start = NULL, etastart, mustart, offset, control = list(...),  #>     model = TRUE, method = \"glm.fit\", x = FALSE, y = TRUE, singular.ok = TRUE,  #>     contrasts = NULL, ...)  #> { #>     cal <- match.call() #>     if (is.character(family))  #>         family <- get(family, mode = \"function\", envir = parent.frame()) #>     if (is.function(family))  #>         family <- family() #>     if (is.null(family$family)) { #>         print(family) #>         stop(\"'family' not recognized\") #>     } #>     if (missing(data))  #>         data <- environment(formula) #>     mf <- match.call(expand.dots = FALSE) #>     m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\",  #>         \"etastart\", \"mustart\", \"offset\"), names(mf), 0L) #>     mf <- mf[c(1L, m)] #>     mf$drop.unused.levels <- TRUE #>     mf[[1L]] <- quote(stats::model.frame) #>     mf <- eval(mf, parent.frame()) #>     if (identical(method, \"model.frame\"))  #>         return(mf) #>     if (!is.character(method) && !is.function(method))  #>         stop(\"invalid 'method' argument\") #>     if (identical(method, \"glm.fit\"))  #>         control <- do.call(\"glm.control\", control) #>     mt <- attr(mf, \"terms\") #>     Y <- model.response(mf, \"any\") #>     if (length(dim(Y)) == 1L) { #>         nm <- rownames(Y) #>         dim(Y) <- NULL #>         if (!is.null(nm))  #>             names(Y) <- nm #>     } #>     X <- if (!is.empty.model(mt))  #>         model.matrix(mt, mf, contrasts) #>     else matrix(, NROW(Y), 0L) #>     weights <- as.vector(model.weights(mf)) #>     if (!is.null(weights) && !is.numeric(weights))  #>         stop(\"'weights' must be a numeric vector\") #>     if (!is.null(weights) && any(weights < 0))  #>         stop(\"negative weights not allowed\") #>     offset <- as.vector(model.offset(mf)) #>     if (!is.null(offset)) { #>         if (length(offset) != NROW(Y))  #>             stop(gettextf(\"number of offsets is %d should equal %d (number of observations)\",  #>                 length(offset), NROW(Y)), domain = NA) #>     } #>     mustart <- model.extract(mf, \"mustart\") #>     etastart <- model.extract(mf, \"etastart\") #>     fit <- eval(call(if (is.function(method)) \"method\" else method,  #>         x = X, y = Y, weights = weights, start = start, etastart = etastart,  #>         mustart = mustart, offset = offset, family = family,  #>         control = control, intercept = attr(mt, \"intercept\") >  #>             0L, singular.ok = singular.ok)) #>     if (length(offset) && attr(mt, \"intercept\") > 0L) { #>         fit2 <- eval(call(if (is.function(method)) \"method\" else method,  #>             x = X[, \"(Intercept)\", drop = FALSE], y = Y, mustart = fit$fitted.values,  #>             weights = weights, offset = offset, family = family,  #>             control = control, intercept = TRUE)) #>         if (!fit2$converged)  #>             warning(\"fitting to calculate the null deviance did not converge -- increase 'maxit'?\") #>         fit$null.deviance <- fit2$deviance #>     } #>     if (model)  #>         fit$model <- mf #>     fit$na.action <- attr(mf, \"na.action\") #>     if (x)  #>         fit$x <- X #>     if (!y)  #>         fit$y <- NULL #>     structure(c(fit, list(call = cal, formula = formula, terms = mt,  #>         data = data, offset = offset, control = control, method = method,  #>         contrasts = attr(X, \"contrasts\"), xlevels = .getXlevels(mt,  #>             mf))), class = c(fit$class, c(\"glm\", \"lm\"))) #> })(formula = f_for_use, family = structure(list(family = \"binomial\",  #>     link = \"logit\", linkfun = function (mu)  #>     .Call(C_logit_link, mu), linkinv = function (eta)  #>     .Call(C_logit_linkinv, eta), variance = function (mu)  #>     mu * (1 - mu), dev.resids = function (y, mu, wt)  #>     .Call(C_binomial_dev_resids, y, mu, wt), aic = function (y,  #>         n, mu, wt, dev)  #>     { #>         m <- if (any(n > 1))  #>             n #>         else wt #>         -2 * sum(ifelse(m > 0, (wt/m), 0) * dbinom(round(m *  #>             y), round(m), mu, log = TRUE)) #>     }, mu.eta = function (eta)  #>     .Call(C_logit_mu_eta, eta), initialize = { #>         if (NCOL(y) == 1) { #>             if (is.factor(y))  #>                 y <- y != levels(y)[1L] #>             n <- rep.int(1, nobs) #>             y[weights == 0] <- 0 #>             if (any(y < 0 | y > 1))  #>                 stop(\"y values must be 0 <= y <= 1\") #>             mustart <- (weights * y + 0.5)/(weights + 1) #>             m <- weights * y #>             if (\"binomial\" == \"binomial\" && any(abs(m - round(m)) >  #>                 0.001))  #>                 warning(gettextf(\"non-integer #successes in a %s glm!\",  #>                   \"binomial\"), domain = NA) #>         } #>         else if (NCOL(y) == 2) { #>             if (\"binomial\" == \"binomial\" && any(abs(y - round(y)) >  #>                 0.001))  #>                 warning(gettextf(\"non-integer counts in a %s glm!\",  #>                   \"binomial\"), domain = NA) #>             n <- (y1 <- y[, 1L]) + y[, 2L] #>             y <- y1/n #>             if (any(n0 <- n == 0))  #>                 y[n0] <- 0 #>             weights <- weights * n #>             mustart <- (n * y + 0.5)/(n + 1) #>         } #>         else stop(gettextf(\"for the '%s' family, y must be a vector of 0 and 1's\\nor a 2 column matrix where col 1 is no. successes and col 2 is no. failures\",  #>             \"binomial\"), domain = NA) #>     }, validmu = function (mu)  #>     all(is.finite(mu)) && all(mu > 0 & mu < 1), valideta = function (eta)  #>     TRUE, simulate = function (object, nsim)  #>     { #>         ftd <- fitted(object) #>         n <- length(ftd) #>         ntot <- n * nsim #>         wts <- object$prior.weights #>         if (any(wts%%1 != 0))  #>             stop(\"cannot simulate from non-integer prior.weights\") #>         if (!is.null(m <- object$model)) { #>             y <- model.response(m) #>             if (is.factor(y)) { #>                 yy <- factor(1 + rbinom(ntot, size = 1, prob = ftd),  #>                   labels = levels(y)) #>                 split(yy, rep(seq_len(nsim), each = n)) #>             } #>             else if (is.matrix(y) && ncol(y) == 2) { #>                 yy <- vector(\"list\", nsim) #>                 for (i in seq_len(nsim)) { #>                   Y <- rbinom(n, size = wts, prob = ftd) #>                   YY <- cbind(Y, wts - Y) #>                   colnames(YY) <- colnames(y) #>                   yy[[i]] <- YY #>                 } #>                 yy #>             } #>             else rbinom(ntot, size = wts, prob = ftd)/wts #>         } #>         else rbinom(ntot, size = wts, prob = ftd)/wts #>     }, dispersion = 1), class = \"family\"), data = data_for_use) #>  #> Coefficients: #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))1   #>                                                                                                                                                      -0.7470   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))2   #>                                                                                                                                                      -1.6971   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))3   #>                                                                                                                                                       0.9829   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))4   #>                                                                                                                                                      -6.4368   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))5   #>                                                                                                                                                       8.2265   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))6   #>                                                                                                                                                      -4.8468   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))7   #>                                                                                                                                                       4.1993   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))8   #>                                                                                                                                                      -6.7906   #>  bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))9   #>                                                                                                                                                       0.5985   #> bsplines(x, bknots = c(0, 4.5), iknots = c(0.587696170317941, 0.650666193297023, 0.729119919384282, 2.62156787476338, 2.94612510132549, 3.78523848066106))10   #>                                                                                                                                                      -1.1779   #>  #> Degrees of Freedom: 2500 Total (i.e. Null);  2490 Residual #> Null Deviance:\t    3466  #> Residual Deviance: 2514 \tAIC: 2534 #>  #> $newdata #>                x y #> 1    4.116627196 0 #> 2    4.216839360 1 #> 3    1.287627907 1 #> 4    3.737014317 0 #> 5    2.887854835 0 #> 6    2.335931771 0 #> 7    3.314647416 1 #> 8    0.605999688 0 #> 9    2.956465307 1 #> 10   3.172791528 0 #> 11   2.059837993 0 #> 12   3.236005132 0 #> 13   4.206025112 1 #> 14   1.149429710 1 #> 15   2.080317701 0 #> 16   4.230065352 0 #> 17   4.402018928 0 #> 18   0.528693127 0 #> 19   2.137486867 1 #> 20   2.521497358 1 #> 21   4.068141243 1 #> 22   0.624195755 0 #> 23   4.450012780 0 #> 24   4.260007047 0 #> 25   0.370969011 1 #> 26   2.313953030 0 #> 27   1.755915602 1 #> 28   4.075821589 0 #> 29   2.011363326 0 #> 30   3.762019170 0 #> 31   3.319180280 1 #> 32   3.649748136 0 #> 33   1.746487273 1 #> 34   3.083263782 1 #> 35   0.017767525 0 #> 36   3.748122361 0 #> 37   0.033003661 0 #> 38   0.934465378 1 #> 39   4.079706335 0 #> 40   2.753003896 1 #> 41   1.708016582 1 #> 42   1.960972132 1 #> 43   0.168439648 0 #> 44   4.380929612 0 #> 45   1.942880620 1 #> 46   4.309094685 0 #> 47   3.994897075 0 #> 48   2.879904463 0 #> 49   4.369349747 0 #> 50   2.784771933 0 #> 51   1.500422451 1 #> 52   1.560367117 1 #> 53   1.793184351 1 #> 54   3.531117491 0 #> 55   0.175214210 1 #> 56   3.369579238 1 #> 57   3.047745736 1 #> 58   0.770689487 0 #> 59   1.174895837 0 #> 60   2.314858206 1 #> 61   3.040232735 1 #> 62   4.422677391 0 #> 63   3.417949204 0 #> 64   2.549197908 1 #> 65   3.823603734 0 #> 66   0.852632709 0 #> 67   1.220789766 0 #> 68   3.726713184 0 #> 69   3.119421692 1 #> 70   1.082451328 0 #> 71   0.193449582 0 #> 72   0.632155924 0 #> 73   0.973734368 1 #> 74   2.157293539 1 #> 75   0.888346540 0 #> 76   3.237101270 1 #> 77   0.035481324 1 #> 78   1.689704841 1 #> 79   2.314834687 0 #> 80   0.007067494 0 #> 81   2.617218011 0 #> 82   0.710573437 0 #> 83   1.615627376 1 #> 84   2.905343453 1 #> 85   3.491205132 0 #> 86   2.536410787 0 #> 87   1.051665294 0 #> 88   0.404912324 1 #> 89   0.385254292 0 #> 90   1.373482663 0 #> 91   3.003419316 1 #> 92   0.001075035 1 #> 93   0.938564806 0 #> 94   4.198653573 0 #> 95   4.165401369 1 #> 96   3.303424355 1 #> 97   1.498823925 1 #> 98   2.317784984 0 #> 99   3.347885908 1 #> 100  2.786216580 0 #> 101  2.818104050 1 #> 102  0.977209642 0 #> 103  0.974552899 0 #> 104  1.750252629 1 #> 105  4.241050614 1 #> 106  4.331736062 0 #> 107  3.329348756 0 #> 108  3.299606576 1 #> 109  2.410925805 0 #> 110  0.010228347 1 #> 111  2.740218536 1 #> 112  3.765607017 0 #> 113  3.381851532 1 #> 114  2.037292077 1 #> 115  2.411054972 0 #> 116  2.418195129 1 #> 117  0.006213796 0 #> 118  1.600496792 1 #> 119  2.754598906 1 #> 120  3.730239587 0 #> 121  1.605248997 0 #> 122  1.847858066 1 #> 123  2.580641545 0 #> 124  2.653552366 1 #> 125  3.238457816 0 #> 126  1.777378703 1 #> 127  4.136417681 0 #> 128  4.331566321 0 #> 129  1.050855865 0 #> 130  3.260239200 1 #> 131  4.066355363 0 #> 132  2.715633381 1 #> 133  2.841782845 1 #> 134  4.218236323 1 #> 135  3.827172378 0 #> 136  2.609194046 0 #> 137  3.696317658 0 #> 138  0.511733741 1 #> 139  3.440284914 0 #> 140  2.806260557 1 #> 141  0.668009730 0 #> 142  0.361190100 0 #> 143  2.088312981 1 #> 144  3.507156727 0 #> 145  3.300875818 1 #> 146  3.677537000 0 #> 147  0.765731166 0 #> 148  4.251241465 1 #> 149  1.321307286 1 #> 150  0.670824236 0 #> 151  3.237203661 1 #> 152  1.458386786 1 #> 153  3.504642743 0 #> 154  1.774984508 0 #> 155  3.053667906 0 #> 156  3.491212692 1 #> 157  0.845410698 0 #> 158  0.130886185 0 #> 159  0.610712087 0 #> 160  3.060738802 0 #> 161  4.206703292 1 #> 162  2.477223380 0 #> 163  2.707948059 1 #> 164  0.886475197 0 #> 165  2.408564748 0 #> 166  0.808000827 0 #> 167  2.033489225 1 #> 168  1.426740083 1 #> 169  0.522786017 0 #> 170  0.837459705 0 #> 171  3.283785435 1 #> 172  1.853424320 1 #> 173  1.863223568 1 #> 174  2.161395581 0 #> 175  1.923725095 1 #> 176  0.614206621 0 #> 177  3.711057329 0 #> 178  2.665369091 1 #> 179  3.574786399 0 #> 180  3.460645916 1 #> 181  4.131253878 0 #> 182  3.881833997 0 #> 183  1.426388570 1 #> 184  1.166672592 0 #> 185  3.340199034 1 #> 186  3.363125026 1 #> 187  4.130568153 0 #> 188  3.569360441 0 #> 189  0.599983282 0 #> 190  1.294873885 0 #> 191  0.876042647 0 #> 192  3.528492222 0 #> 193  0.579924728 0 #> 194  0.580901776 0 #> 195  0.325139001 0 #> 196  0.239082676 0 #> 197  2.393434964 1 #> 198  0.505387087 0 #> 199  3.344344739 0 #> 200  3.290919648 0 #> 201  3.983029592 0 #> 202  2.326999750 1 #> 203  3.833689432 0 #> 204  1.992583207 0 #> 205  0.710460452 0 #> 206  1.990460875 1 #> 207  4.354801503 0 #> 208  2.180645682 0 #> 209  1.136062977 1 #> 210  1.168604911 0 #> 211  2.439071734 1 #> 212  2.924441269 1 #> 213  1.513886095 1 #> 214  0.274273858 0 #> 215  2.030898826 0 #> 216  3.774397651 0 #> 217  2.585868004 1 #> 218  1.590076698 1 #> 219  2.463417352 1 #> 220  4.017233672 0 #> 221  2.204957568 0 #> 222  0.772344509 0 #> 223  2.443639473 1 #> 224  4.326604631 1 #> 225  1.411577199 0 #> 226  3.692315466 0 #> 227  1.381744802 1 #> 228  0.834541115 0 #> 229  0.217560495 0 #> 230  1.105533663 1 #> 231  1.579981150 1 #> 232  0.715600718 0 #> 233  1.368440986 1 #> 234  0.078967461 1 #> 235  4.484487056 0 #> 236  3.619769907 0 #> 237  0.389612708 0 #> 238  3.914699714 0 #> 239  2.495636385 0 #> 240  1.896202898 1 #> 241  0.304365686 0 #> 242  2.526470804 1 #> 243  0.318248524 0 #> 244  0.951263725 0 #> 245  2.473291861 0 #> 246  2.168916518 1 #> 247  0.717614345 0 #> 248  0.673105478 0 #> 249  2.246727962 0 #> 250  4.232541951 1 #> 251  1.504040970 1 #> 252  0.847954483 0 #> 253  1.213722802 1 #> 254  2.388348351 1 #> 255  0.096526028 0 #> 256  3.594421384 0 #> 257  0.496507951 0 #> 258  2.429092286 0 #> 259  2.570552539 1 #> 260  2.785281961 1 #> 261  3.216841621 0 #> 262  0.554852604 0 #> 263  1.399723284 1 #> 264  4.255826232 0 #> 265  2.250112916 0 #> 266  0.608537246 0 #> 267  3.911660192 0 #> 268  0.922723254 0 #> 269  4.162706509 1 #> 270  3.990391192 1 #> 271  0.613331214 0 #> 272  3.534072490 1 #> 273  2.039865364 0 #> 274  0.610840887 0 #> 275  3.983494666 0 #> 276  1.515210931 1 #> 277  1.436733518 1 #> 278  1.817022666 1 #> 279  2.155847882 0 #> 280  1.655558191 1 #> 281  2.095607554 1 #> 282  0.224514688 0 #> 283  0.843105202 0 #> 284  4.421967362 0 #> 285  1.477233313 1 #> 286  0.769483757 0 #> 287  2.197147025 0 #> 288  0.084093353 0 #> 289  1.527682877 1 #> 290  0.133485190 0 #> 291  3.902528984 0 #> 292  3.292684199 0 #> 293  1.418673586 1 #> 294  1.739043053 1 #> 295  1.496006957 1 #> 296  0.404000870 0 #> 297  3.406750211 1 #> 298  2.713358237 1 #> 299  0.654299877 0 #> 300  0.146328676 0 #> 301  2.176956637 1 #> 302  2.000562875 1 #> 303  0.271735155 0 #> 304  1.473777099 1 #> 305  3.952930713 0 #> 306  4.187721988 0 #> 307  1.764803056 1 #> 308  0.714810487 0 #> 309  1.439764205 1 #> 310  1.381345291 1 #> 311  0.485150645 0 #> 312  4.407004365 0 #> 313  2.236065426 0 #> 314  0.418836024 1 #> 315  0.952981462 0 #> 316  4.187253358 0 #> 317  1.335808830 0 #> 318  2.939482120 0 #> 319  4.054817151 0 #> 320  4.458581070 1 #> 321  1.936499496 1 #> 322  1.771996150 1 #> 323  0.638590030 0 #> 324  1.259130134 1 #> 325  2.541700002 0 #> 326  4.208127774 1 #> 327  1.612800653 1 #> 328  3.789032314 0 #> 329  3.250841465 1 #> 330  3.378311952 0 #> 331  4.157948035 1 #> 332  0.010701481 0 #> 333  0.721934617 0 #> 334  1.796728281 1 #> 335  3.038938098 1 #> 336  2.161674073 0 #> 337  2.402229513 1 #> 338  1.426275708 0 #> 339  3.666409156 0 #> 340  1.314987846 1 #> 341  1.841094411 0 #> 342  0.409132384 0 #> 343  3.593684871 0 #> 344  1.619033624 1 #> 345  0.182194095 0 #> 346  0.184888529 1 #> 347  4.294954073 0 #> 348  1.680035602 1 #> 349  3.628888504 0 #> 350  4.095265540 1 #> 351  1.980342958 0 #> 352  2.593514264 0 #> 353  0.331505078 0 #> 354  0.740823275 0 #> 355  3.329508491 1 #> 356  2.140699557 0 #> 357  3.084844290 1 #> 358  4.281817243 1 #> 359  2.238590194 0 #> 360  2.117252820 1 #> 361  2.520863775 1 #> 362  2.936295542 1 #> 363  1.258080744 1 #> 364  4.409584153 1 #> 365  2.897388486 1 #> 366  2.621602961 0 #> 367  2.771419617 1 #> 368  4.163131325 0 #> 369  1.755103029 0 #> 370  1.295638583 0 #> 371  0.408311841 0 #> 372  1.449152568 1 #> 373  3.412215507 0 #> 374  0.469858183 0 #> 375  3.196250337 0 #> 376  4.349148226 0 #> 377  0.906710518 1 #> 378  0.488198945 0 #> 379  0.249309805 0 #> 380  3.733755818 0 #> 381  2.615389905 0 #> 382  2.115415689 0 #> 383  1.642563540 1 #> 384  1.260560823 1 #> 385  2.698721347 0 #> 386  3.683563258 0 #> 387  0.440245262 0 #> 388  4.336602867 0 #> 389  0.759313995 1 #> 390  0.387375326 0 #> 391  3.875448131 0 #> 392  2.361557709 0 #> 393  2.955648939 1 #> 394  1.032837178 0 #> 395  3.245517141 1 #> 396  2.208376777 1 #> 397  4.343650166 0 #> 398  4.081241162 0 #> 399  2.480627375 1 #> 400  0.340195948 0 #> 401  0.102150051 0 #> 402  2.309577875 0 #> 403  2.838267682 1 #> 404  1.884472309 0 #> 405  3.956696753 0 #> 406  0.485941829 1 #> 407  4.411254134 0 #> 408  1.192349841 1 #> 409  0.379248854 0 #> 410  1.736582291 1 #> 411  0.562031222 0 #> 412  2.616993998 0 #> 413  1.080673237 0 #> 414  3.248495499 1 #> 415  0.656679108 0 #> 416  0.687774466 0 #> 417  1.166502016 1 #> 418  3.500488170 1 #> 419  1.919098349 0 #> 420  0.270217513 0 #> 421  0.516746417 0 #> 422  2.172406038 1 #> 423  4.406281128 0 #> 424  3.651825541 0 #> 425  2.443107677 0 #> 426  0.325651892 0 #> 427  2.099183607 0 #> 428  1.529575407 1 #> 429  3.104633723 1 #> 430  2.313708174 0 #> 431  2.317153570 0 #> 432  2.454814593 1 #> 433  2.013557985 1 #> 434  0.377481782 0 #> 435  4.185601613 0 #> 436  0.074016838 0 #> 437  1.863415797 1 #> 438  1.021392420 0 #> 439  0.448382643 0 #> 440  2.173157438 1 #> 441  2.925579021 1 #> 442  4.145984003 0 #> 443  1.631708132 1 #> 444  3.848107455 0 #> 445  1.354077682 1 #> 446  2.095480913 0 #> 447  0.642287992 0 #> 448  3.634735471 0 #> 449  2.996134343 1 #> 450  0.278734410 0 #> 451  1.939165057 0 #> 452  1.785847866 1 #> 453  3.136305381 1 #> 454  2.966938428 1 #> 455  1.833078193 1 #> 456  1.381140992 1 #> 457  1.147983053 1 #> 458  3.026556690 1 #> 459  4.024770451 1 #> 460  3.805812703 0 #> 461  1.768058356 1 #> 462  0.355727430 0 #> 463  3.727903756 0 #> 464  0.328013212 0 #> 465  0.516432049 0 #> 466  2.879929215 1 #> 467  1.442547901 1 #> 468  0.849372868 0 #> 469  1.772233385 1 #> 470  3.879117072 0 #> 471  1.565601329 1 #> 472  0.006452543 1 #> 473  4.100780042 0 #> 474  4.282755520 1 #> 475  2.209135424 0 #> 476  2.086432719 0 #> 477  2.684124211 0 #> 478  4.077229308 0 #> 479  0.778505306 0 #> 480  3.536464845 1 #> 481  1.048204731 1 #> 482  2.596716941 1 #> 483  3.783946650 0 #> 484  0.594916996 0 #> 485  4.031510353 0 #> 486  2.025618035 1 #> 487  4.023641420 0 #> 488  1.118453312 0 #> 489  0.376628821 1 #> 490  0.218884836 1 #> 491  4.409171402 1 #> 492  2.178754835 0 #> 493  3.804268653 0 #> 494  1.873321220 1 #> 495  2.202041443 0 #> 496  0.824795179 0 #> 497  3.416226606 0 #> 498  1.373144861 1 #> 499  0.745552112 0 #> 500  0.147641143 1 #> 501  0.614273437 0 #> 502  0.797113851 0 #> 503  2.338022027 0 #> 504  3.650043533 0 #> 505  0.519129056 0 #> 506  4.020398040 0 #> 507  2.589087965 0 #> 508  0.659575774 0 #> 509  4.062626084 0 #> 510  1.138511112 0 #> 511  0.677689201 0 #> 512  3.458462219 1 #> 513  1.035554990 1 #> 514  1.374296976 0 #> 515  2.333563255 0 #> 516  1.505698500 1 #> 517  0.694957357 0 #> 518  1.198663059 1 #> 519  1.578395776 1 #> 520  2.603062705 1 #> 521  3.638708079 0 #> 522  4.199716417 0 #> 523  3.752385019 0 #> 524  0.571512485 0 #> 525  2.922542782 1 #> 526  3.106582459 1 #> 527  0.144201710 1 #> 528  4.142201174 0 #> 529  2.153109992 0 #> 530  1.199342603 1 #> 531  3.854298223 0 #> 532  1.031159150 0 #> 533  3.563760930 1 #> 534  2.910486871 1 #> 535  1.909506108 1 #> 536  0.427807206 0 #> 537  0.015604668 1 #> 538  2.390101510 0 #> 539  2.359382022 0 #> 540  0.959334996 0 #> 541  3.226194360 1 #> 542  4.326046093 1 #> 543  2.332199698 1 #> 544  0.785376100 0 #> 545  2.531430607 0 #> 546  3.416661764 1 #> 547  3.001371019 1 #> 548  1.011928155 0 #> 549  1.556323931 1 #> 550  1.439242920 1 #> 551  4.072042789 0 #> 552  0.896392711 0 #> 553  3.064333575 1 #> 554  0.618829914 0 #> 555  0.481476091 0 #> 556  0.417867281 0 #> 557  4.124020298 0 #> 558  1.246771961 0 #> 559  3.986072448 0 #> 560  3.477890923 0 #> 561  3.577730563 0 #> 562  0.925531169 1 #> 563  0.216869953 0 #> 564  0.174671690 0 #> 565  1.280583584 1 #> 566  1.569644246 1 #> 567  3.318539964 0 #> 568  1.132486116 0 #> 569  2.328466514 0 #> 570  3.417501252 0 #> 571  2.862380376 1 #> 572  0.917733084 0 #> 573  4.468703769 1 #> 574  0.001822695 0 #> 575  0.929565113 0 #> 576  2.853126408 1 #> 577  0.077813214 1 #> 578  0.120309621 0 #> 579  2.735282678 1 #> 580  2.567436087 0 #> 581  1.106340066 0 #> 582  4.137862889 0 #> 583  3.024972908 1 #> 584  2.904526977 1 #> 585  0.937284546 0 #> 586  2.162779811 0 #> 587  4.439333625 0 #> 588  4.469039315 0 #> 589  2.028483165 0 #> 590  3.216819538 0 #> 591  1.424527256 1 #> 592  3.751594023 0 #> 593  1.952890117 1 #> 594  4.481965162 0 #> 595  3.626150460 0 #> 596  2.188089753 1 #> 597  2.424474004 0 #> 598  1.534679588 1 #> 599  0.234070220 0 #> 600  2.064254009 1 #> 601  2.241704657 1 #> 602  1.272439014 1 #> 603  3.494002871 0 #> 604  1.367337428 1 #> 605  2.319980319 0 #> 606  2.150778479 0 #> 607  3.459835011 0 #> 608  0.737679851 0 #> 609  1.987983675 0 #> 610  2.355334514 0 #> 611  2.146136349 0 #> 612  2.360894795 0 #> 613  3.083527112 1 #> 614  1.583064100 1 #> 615  3.778340784 0 #> 616  4.148611612 1 #> 617  0.478393296 0 #> 618  0.929380132 0 #> 619  2.189893103 1 #> 620  1.457199107 1 #> 621  2.122712663 1 #> 622  2.637398259 1 #> 623  1.007775057 0 #> 624  3.303133740 0 #> 625  0.677178446 0 #> 626  3.138990151 1 #> 627  1.188485572 0 #> 628  1.919092150 1 #> 629  3.246001080 0 #> 630  2.135122682 1 #> 631  1.523641324 0 #> 632  1.082664625 1 #> 633  0.973168551 0 #> 634  1.089261536 0 #> 635  2.542071029 0 #> 636  3.206556400 1 #> 637  0.486434691 0 #> 638  2.335841431 0 #> 639  3.834856551 0 #> 640  3.215843739 1 #> 641  1.412917582 1 #> 642  0.521177141 0 #> 643  2.587518304 1 #> 644  3.741173649 0 #> 645  2.341528911 1 #> 646  3.123049629 0 #> 647  2.249567953 1 #> 648  1.593721794 1 #> 649  4.341618716 0 #> 650  4.150175644 0 #> 651  0.920667180 1 #> 652  4.297063197 0 #> 653  3.932967746 0 #> 654  3.138051741 1 #> 655  2.306672032 1 #> 656  2.163674319 0 #> 657  0.908104154 0 #> 658  0.451032095 0 #> 659  2.126649936 0 #> 660  1.404808416 1 #> 661  3.475796873 0 #> 662  4.054833006 0 #> 663  1.508531779 1 #> 664  3.707749109 0 #> 665  0.990147869 1 #> 666  3.447556823 1 #> 667  2.523185330 0 #> 668  1.905549920 1 #> 669  3.773564047 0 #> 670  1.292942644 1 #> 671  2.118243153 0 #> 672  3.513800400 0 #> 673  0.372225768 0 #> 674  1.775328976 1 #> 675  0.430476333 0 #> 676  0.599999562 0 #> 677  0.995067801 1 #> 678  1.233537935 1 #> 679  1.345766624 1 #> 680  1.686540476 1 #> 681  2.211536216 1 #> 682  3.953711806 0 #> 683  3.369284229 1 #> 684  4.298337104 1 #> 685  1.493640959 1 #> 686  3.708732584 0 #> 687  0.596994225 0 #> 688  0.561135842 0 #> 689  3.276493703 0 #> 690  2.467893728 0 #> 691  2.738328358 1 #> 692  0.553260152 0 #> 693  3.943956145 0 #> 694  3.790569670 0 #> 695  0.208070161 0 #> 696  3.181582479 1 #> 697  2.406559748 1 #> 698  4.254557553 0 #> 699  4.104134906 0 #> 700  2.051903324 1 #> 701  3.444842154 0 #> 702  2.272700608 0 #> 703  0.911468173 1 #> 704  3.227124250 1 #> 705  3.456346340 1 #> 706  3.178696704 1 #> 707  0.862308613 0 #> 708  1.340549105 1 #> 709  1.463090699 1 #> 710  2.573443057 0 #> 711  3.971211865 1 #> 712  3.946965194 0 #> 713  1.736336417 1 #> 714  3.319974697 1 #> 715  3.583437138 0 #> 716  3.258726573 1 #> 717  1.734473650 0 #> 718  1.341685272 0 #> 719  0.258620186 1 #> 720  3.031618339 1 #> 721  0.890963671 0 #> 722  2.812985546 1 #> 723  0.621822782 0 #> 724  1.678853343 0 #> 725  1.413404248 1 #> 726  3.668332049 0 #> 727  1.657431436 1 #> 728  1.978398568 1 #> 729  1.975761124 0 #> 730  2.708227286 0 #> 731  1.817581213 1 #> 732  4.312432264 0 #> 733  4.368455837 0 #> 734  4.115376104 0 #> 735  0.372931688 0 #> 736  2.145868249 1 #> 737  1.526108697 1 #> 738  3.030461163 1 #> 739  2.864186753 1 #> 740  3.866751515 0 #> 741  4.267279912 0 #> 742  2.582851797 0 #> 743  2.408710750 0 #> 744  4.237624993 0 #> 745  4.015598185 0 #> 746  1.846378524 1 #> 747  0.225138363 0 #> 748  3.502211826 0 #> 749  4.166826254 0 #> 750  1.698647436 1 #> 751  1.102144476 0 #> 752  0.394361588 0 #> 753  1.759988236 1 #> 754  0.821526414 0 #> 755  0.601311531 0 #> 756  1.158583110 1 #> 757  2.489611715 0 #> 758  0.666311744 0 #> 759  4.333035709 0 #> 760  4.250352955 0 #> 761  4.465286074 0 #> 762  3.177947568 0 #> 763  0.633502601 0 #> 764  0.040421809 1 #> 765  3.089229924 1 #> 766  3.065481863 1 #> 767  4.128798971 0 #> 768  1.837895464 1 #> 769  1.900977255 0 #> 770  2.417940368 1 #> 771  1.861409084 0 #> 772  0.439400963 0 #> 773  1.711204382 1 #> 774  0.891002599 0 #> 775  3.262609019 1 #> 776  0.049540684 0 #> 777  4.134859920 0 #> 778  4.051029304 0 #> 779  3.393692390 1 #> 780  4.283648168 1 #> 781  2.815141915 0 #> 782  2.951777345 1 #> 783  1.716190279 1 #> 784  0.295225359 0 #> 785  3.108963827 1 #> 786  0.573677403 0 #> 787  1.310933334 0 #> 788  2.844994009 1 #> 789  1.755107990 0 #> 790  0.316915469 0 #> 791  3.886078189 0 #> 792  1.733355932 1 #> 793  3.018420602 0 #> 794  0.095383360 0 #> 795  2.678529423 1 #> 796  1.243085225 0 #> 797  1.796071073 1 #> 798  0.656169433 0 #> 799  3.708367778 0 #> 800  0.631844472 0 #> 801  4.090713818 0 #> 802  4.049661651 0 #> 803  0.865571643 0 #> 804  2.395306187 1 #> 805  2.349561332 0 #> 806  0.721510789 0 #> 807  2.338051580 0 #> 808  1.010265792 0 #> 809  1.266803957 0 #> 810  2.266594109 0 #> 811  0.715322920 0 #> 812  4.142838327 0 #> 813  2.245632568 1 #> 814  2.769048347 1 #> 815  3.347688946 1 #> 816  2.775681949 1 #> 817  4.185634707 0 #> 818  0.361703097 0 #> 819  0.126545360 0 #> 820  2.436878109 1 #> 821  1.085411560 1 #> 822  2.901768849 1 #> 823  1.699815596 0 #> 824  0.210841590 0 #> 825  0.216632247 1 #> 826  4.332792116 1 #> 827  1.019100377 0 #> 828  0.051271063 1 #> 829  0.983140372 0 #> 830  0.251719059 1 #> 831  1.057374661 1 #> 832  1.812133215 0 #> 833  0.064369962 0 #> 834  1.627934258 1 #> 835  2.630248829 0 #> 836  2.726071822 1 #> 837  1.186733759 1 #> 838  3.038169047 1 #> 839  4.211127972 0 #> 840  0.016161329 0 #> 841  3.541370287 1 #> 842  3.631199161 0 #> 843  0.328672730 0 #> 844  2.551496866 0 #> 845  2.426358807 0 #> 846  0.619538198 0 #> 847  1.243496920 1 #> 848  1.583295781 0 #> 849  3.657623563 0 #> 850  0.771936066 1 #> 851  2.345229417 0 #> 852  3.440802791 0 #> 853  1.299400413 1 #> 854  1.965502422 1 #> 855  3.012528410 0 #> 856  0.166157020 0 #> 857  2.522908571 1 #> 858  4.195724567 0 #> 859  1.955801214 0 #> 860  4.213046776 1 #> 861  4.402361826 1 #> 862  3.045430299 1 #> 863  1.342210029 1 #> 864  0.937140276 0 #> 865  1.435033930 1 #> 866  3.844687358 0 #> 867  0.274769581 0 #> 868  0.819207475 0 #> 869  2.177264705 0 #> 870  1.522276084 1 #> 871  3.660132141 0 #> 872  3.916946160 0 #> 873  0.086225755 0 #> 874  3.711366820 0 #> 875  1.805708229 1 #> 876  3.024262297 1 #> 877  0.534024970 0 #> 878  2.143909528 0 #> 879  4.164029837 1 #> 880  2.586777038 0 #> 881  4.107382108 0 #> 882  3.398858659 1 #> 883  2.839499659 1 #> 884  3.574892927 0 #> 885  4.155959080 0 #> 886  0.740109644 0 #> 887  0.867977750 0 #> 888  0.439391995 0 #> 889  3.730992279 0 #> 890  3.626387810 0 #> 891  1.256714938 1 #> 892  2.020633106 1 #> 893  2.816454183 1 #> 894  1.669146373 1 #> 895  1.720435268 0 #> 896  4.115163944 0 #> 897  1.756339896 0 #> 898  0.316321918 0 #> 899  3.183779749 1 #> 900  3.118485663 1 #> 901  0.432662806 1 #> 902  0.166064533 1 #> 903  1.804230544 1 #> 904  0.051917513 0 #> 905  2.555509572 1 #> 906  4.252274666 0 #> 907  1.544859798 0 #> 908  1.100242259 1 #> 909  2.437546398 0 #> 910  0.529669701 0 #> 911  1.687088048 0 #> 912  1.473800026 0 #> 913  4.262425880 1 #> 914  4.097587105 0 #> 915  3.431001220 1 #> 916  3.411337123 0 #> 917  4.493208755 0 #> 918  2.611806321 0 #> 919  0.959778816 0 #> 920  0.600983543 0 #> 921  3.565270423 0 #> 922  4.418576268 0 #> 923  4.419219566 0 #> 924  0.564495638 0 #> 925  2.782283148 1 #> 926  3.861840619 0 #> 927  0.627243911 0 #> 928  1.649612347 0 #> 929  0.707086022 0 #> 930  2.015279254 1 #> 931  2.186435607 1 #> 932  4.275913682 0 #> 933  4.071392460 0 #> 934  4.230741158 0 #> 935  3.480719565 0 #> 936  0.414949436 1 #> 937  0.073095433 0 #> 938  1.500793141 1 #> 939  1.088338915 0 #> 940  3.564318232 0 #> 941  2.233741670 0 #> 942  2.312455906 0 #> 943  0.325808454 0 #> 944  1.553125949 0 #> 945  3.403462236 1 #> 946  1.733035705 0 #> 947  0.031144680 0 #> 948  3.232976536 1 #> 949  2.506361995 1 #> 950  0.315371819 0 #> 951  1.565174390 1 #> 952  1.858524996 0 #> 953  1.402448395 1 #> 954  3.319055857 0 #> 955  1.747531277 1 #> 956  2.787409252 0 #> 957  2.805935705 0 #> 958  3.610855490 0 #> 959  2.943305718 1 #> 960  3.057539031 1 #> 961  1.848396705 1 #> 962  2.984639141 0 #> 963  0.122029999 0 #> 964  3.671680341 0 #> 965  0.337692506 0 #> 966  4.054343815 0 #> 967  0.318722556 0 #> 968  0.860055225 1 #> 969  3.496181617 0 #> 970  0.914100767 1 #> 971  1.816940297 1 #> 972  2.007812827 1 #> 973  2.728329609 1 #> 974  2.594005842 0 #> 975  0.267780449 1 #> 976  0.821992882 0 #> 977  1.332547478 0 #> 978  1.692355888 1 #> 979  3.208931738 1 #> 980  0.563168637 0 #> 981  1.931550458 1 #> 982  0.136696673 0 #> 983  2.043759012 1 #> 984  3.574386572 1 #> 985  2.120744233 0 #> 986  1.063753248 0 #> 987  3.991657575 0 #> 988  0.566787533 0 #> 989  1.211901295 1 #> 990  3.971061662 0 #> 991  3.377339198 0 #> 992  0.439618237 1 #> 993  3.670051572 0 #> 994  3.862768630 0 #> 995  0.527207849 0 #> 996  0.618287231 0 #> 997  2.467156489 1 #> 998  0.265633426 1 #> 999  2.229854810 0 #> 1000 0.033378854 0 #> 1001 3.817319501 0 #> 1002 0.282358493 0 #> 1003 3.689302894 0 #> 1004 2.427121324 1 #> 1005 2.245590445 0 #> 1006 0.100022944 0 #> 1007 2.493419106 1 #> 1008 3.239539213 1 #> 1009 1.060718532 0 #> 1010 3.653458565 0 #> 1011 1.896632537 1 #> 1012 2.542097479 0 #> 1013 0.682608531 0 #> 1014 0.876565960 0 #> 1015 0.750523664 0 #> 1016 3.757993075 0 #> 1017 0.499852797 0 #> 1018 1.206315480 0 #> 1019 3.593164366 0 #> 1020 1.345182337 1 #> 1021 3.904059386 0 #> 1022 0.177404612 0 #> 1023 1.529205795 1 #> 1024 1.393182430 1 #> 1025 0.582541584 0 #> 1026 1.682255182 1 #> 1027 2.092345330 1 #> 1028 0.209736850 0 #> 1029 4.443822897 1 #> 1030 4.088035487 0 #> 1031 4.407255660 0 #> 1032 0.767124962 0 #> 1033 0.192304683 0 #> 1034 0.642745638 0 #> 1035 1.622613787 1 #> 1036 2.449892473 1 #> 1037 4.218284783 0 #> 1038 2.859969896 0 #> 1039 2.181359392 1 #> 1040 0.386533024 1 #> 1041 4.252109342 0 #> 1042 1.560211973 0 #> 1043 1.662058005 1 #> 1044 2.808669343 1 #> 1045 3.273326214 1 #> 1046 0.890676490 0 #> 1047 2.649218400 0 #> 1048 3.793037251 0 #> 1049 4.497205645 0 #> 1050 0.051472122 0 #> 1051 3.695993325 1 #> 1052 0.925307219 0 #> 1053 0.512121830 0 #> 1054 3.096385486 1 #> 1055 1.228325937 1 #> 1056 3.704264456 0 #> 1057 2.899783810 1 #> 1058 2.375560264 0 #> 1059 0.128929356 0 #> 1060 1.292265177 1 #> 1061 0.160125878 0 #> 1062 4.040405791 1 #> 1063 0.589360214 0 #> 1064 0.231498400 0 #> 1065 1.637759353 0 #> 1066 3.129663524 1 #> 1067 4.015391091 0 #> 1068 1.099242878 1 #> 1069 1.763848786 1 #> 1070 2.790697083 1 #> 1071 2.540236398 1 #> 1072 0.186307070 1 #> 1073 2.134095686 0 #> 1074 4.271423551 0 #> 1075 1.081491053 0 #> 1076 3.051637660 1 #> 1077 4.110444829 0 #> 1078 0.205116868 1 #> 1079 0.613922091 0 #> 1080 0.451594049 1 #> 1081 1.843445767 0 #> 1082 4.364765303 0 #> 1083 1.637930930 1 #> 1084 3.262056361 0 #> 1085 3.162066964 1 #> 1086 0.111665701 1 #> 1087 4.256993432 0 #> 1088 2.400711791 1 #> 1089 3.133391247 0 #> 1090 0.203658762 0 #> 1091 4.124571430 0 #> 1092 0.147798994 0 #> 1093 3.497837584 0 #> 1094 2.367637991 0 #> 1095 1.197548476 1 #> 1096 2.272212357 0 #> 1097 2.396228652 0 #> 1098 0.390916064 1 #> 1099 4.120206434 0 #> 1100 2.538037181 0 #> 1101 0.266537368 0 #> 1102 3.027265624 1 #> 1103 2.822952050 1 #> 1104 0.327849390 1 #> 1105 1.969672744 1 #> 1106 2.886933357 1 #> 1107 3.644862692 0 #> 1108 1.762888374 1 #> 1109 3.480402627 0 #> 1110 3.930278063 0 #> 1111 2.782409024 1 #> 1112 1.609803828 1 #> 1113 4.195155065 1 #> 1114 3.351281832 1 #> 1115 0.286055962 1 #> 1116 0.486915785 0 #> 1117 3.684500512 1 #> 1118 3.568846221 0 #> 1119 0.256981663 0 #> 1120 4.084292779 0 #> 1121 3.247373761 1 #> 1122 4.062181476 0 #> 1123 2.410714193 1 #> 1124 1.568427010 1 #> 1125 3.749820199 0 #> 1126 3.556480460 0 #> 1127 2.391340772 1 #> 1128 3.504235377 0 #> 1129 0.262615260 1 #> 1130 2.061496918 0 #> 1131 0.100489682 1 #> 1132 3.329501002 1 #> 1133 3.175816885 1 #> 1134 0.025680015 0 #> 1135 2.118389491 0 #> 1136 2.682776534 1 #> 1137 1.277971166 1 #> 1138 0.248486807 0 #> 1139 1.700434307 0 #> 1140 2.386007464 0 #> 1141 1.129401312 1 #> 1142 4.248389216 0 #> 1143 1.968697219 1 #> 1144 3.154800634 0 #> 1145 0.791315514 0 #> 1146 1.088886702 0 #> 1147 0.106574323 0 #> 1148 1.479469719 0 #> 1149 1.858911415 1 #> 1150 0.489395501 0 #> 1151 3.834235171 0 #> 1152 0.040769724 0 #> 1153 4.363935880 0 #> 1154 3.620910115 1 #> 1155 2.254678734 1 #> 1156 4.203806126 0 #> 1157 2.105335002 0 #> 1158 2.299395581 1 #> 1159 3.744998085 0 #> 1160 0.722923189 0 #> 1161 2.346126862 0 #> 1162 1.951050358 0 #> 1163 1.493181380 1 #> 1164 2.016106879 1 #> 1165 0.185253121 1 #> 1166 1.095138228 0 #> 1167 0.464263452 0 #> 1168 1.634089265 1 #> 1169 2.959839146 1 #> 1170 1.912678457 0 #> 1171 0.324866679 0 #> 1172 3.092135362 1 #> 1173 3.837537126 0 #> 1174 3.902478988 0 #> 1175 0.400868368 0 #> 1176 0.058671510 1 #> 1177 1.904652316 1 #> 1178 4.379663028 1 #> 1179 2.245806394 0 #> 1180 4.475936720 1 #> 1181 2.226968198 1 #> 1182 0.553660206 0 #> 1183 2.521735927 0 #> 1184 1.076816371 1 #> 1185 3.263627375 1 #> 1186 3.537123278 0 #> 1187 2.024018485 1 #> 1188 2.110859636 1 #> 1189 1.808370107 1 #> 1190 4.060689804 0 #> 1191 2.536597844 0 #> 1192 3.109485044 1 #> 1193 1.495234066 0 #> 1194 0.426888478 0 #> 1195 4.220567209 0 #> 1196 3.019585787 1 #> 1197 0.067473412 0 #> 1198 0.509011958 1 #> 1199 3.815058859 0 #> 1200 2.010687488 1 #> 1201 1.808461752 1 #> 1202 1.944963910 0 #> 1203 2.986219862 1 #> 1204 0.820661963 0 #> 1205 3.772524420 0 #> 1206 4.128178388 0 #> 1207 3.592354785 0 #> 1208 2.263753268 0 #> 1209 1.145067737 1 #> 1210 3.002604461 1 #> 1211 4.234947187 1 #> 1212 4.413424632 0 #> 1213 0.235337732 0 #> 1214 1.720820346 1 #> 1215 3.627799141 1 #> 1216 2.465494645 0 #> 1217 1.370090347 1 #> 1218 1.810371719 0 #> 1219 0.124181039 0 #> 1220 3.820471592 0 #> 1221 0.139651662 1 #> 1222 2.935313242 1 #> 1223 2.685784972 1 #> 1224 1.406749671 1 #> 1225 4.441095451 1 #> 1226 3.730171226 0 #> 1227 2.734730685 1 #> 1228 0.621506861 0 #> 1229 3.919172230 0 #> 1230 2.596894843 0 #> 1231 3.596276568 0 #> 1232 0.126882927 0 #> 1233 1.153609832 0 #> 1234 3.405451111 0 #> 1235 3.734767372 0 #> 1236 2.356705119 0 #> 1237 2.870719156 1 #> 1238 2.195575226 1 #> 1239 2.618273691 1 #> 1240 0.451665102 0 #> 1241 3.787262859 0 #> 1242 1.811222436 0 #> 1243 3.476720762 1 #> 1244 4.281560327 1 #> 1245 1.194610418 1 #> 1246 3.731838743 0 #> 1247 2.941474922 1 #> 1248 3.593317866 0 #> 1249 0.837681546 0 #> 1250 3.396184087 0 #> 1251 3.311641658 0 #> 1252 3.383035869 0 #> 1253 1.496765180 1 #> 1254 0.258968809 0 #> 1255 3.034869514 1 #> 1256 0.187065779 0 #> 1257 2.896033644 1 #> 1258 1.348220281 0 #> 1259 1.770439862 0 #> 1260 4.155769180 0 #> 1261 3.056480072 1 #> 1262 3.228958387 1 #> 1263 3.227114795 1 #> 1264 1.026774265 1 #> 1265 1.839482730 0 #> 1266 2.570012833 0 #> 1267 3.957525670 0 #> 1268 2.676051121 1 #> 1269 4.131653156 0 #> 1270 1.581226769 1 #> 1271 1.142947834 1 #> 1272 3.213501960 1 #> 1273 0.983117198 0 #> 1274 1.995145441 0 #> 1275 3.132957069 0 #> 1276 3.030768639 1 #> 1277 0.812426285 0 #> 1278 3.292853294 1 #> 1279 1.469533421 1 #> 1280 1.585910661 1 #> 1281 3.550469325 0 #> 1282 1.640416812 1 #> 1283 1.274224206 1 #> 1284 1.172788175 1 #> 1285 0.121138994 1 #> 1286 2.953317133 1 #> 1287 3.360509564 0 #> 1288 2.840154785 1 #> 1289 0.245331447 0 #> 1290 2.372781891 0 #> 1291 0.394976137 0 #> 1292 1.216293881 0 #> 1293 0.005726377 0 #> 1294 3.179314566 0 #> 1295 3.586861608 0 #> 1296 0.604317941 0 #> 1297 2.696087156 1 #> 1298 1.616461600 1 #> 1299 3.051290518 0 #> 1300 1.646685319 1 #> 1301 3.603989547 0 #> 1302 4.441636239 0 #> 1303 2.174673166 1 #> 1304 0.354156679 0 #> 1305 0.605047755 0 #> 1306 4.024510190 0 #> 1307 3.210959624 0 #> 1308 3.933752587 1 #> 1309 4.066986919 0 #> 1310 2.147849814 0 #> 1311 0.300503635 0 #> 1312 3.239455708 1 #> 1313 1.223680621 1 #> 1314 1.469611568 1 #> 1315 1.732723321 1 #> 1316 1.488193188 1 #> 1317 0.443611415 0 #> 1318 2.615304493 0 #> 1319 3.402864376 0 #> 1320 2.326518677 0 #> 1321 1.235366081 1 #> 1322 2.000779988 1 #> 1323 4.030228253 0 #> 1324 4.145771591 0 #> 1325 2.346013898 1 #> 1326 3.446383446 1 #> 1327 3.450246849 0 #> 1328 3.772033644 0 #> 1329 4.233373606 0 #> 1330 1.902534526 0 #> 1331 2.721311501 1 #> 1332 0.990890203 1 #> 1333 3.866394197 0 #> 1334 4.174617476 0 #> 1335 2.625473263 1 #> 1336 2.964802215 1 #> 1337 0.293888120 0 #> 1338 1.100464037 0 #> 1339 2.290214058 1 #> 1340 2.317244259 1 #> 1341 3.436485048 0 #> 1342 1.205331814 1 #> 1343 3.094834096 1 #> 1344 2.509764945 0 #> 1345 1.939394725 1 #> 1346 3.874117698 0 #> 1347 0.502510947 0 #> 1348 1.423372691 1 #> 1349 3.334451858 1 #> 1350 2.459753950 1 #> 1351 0.808712466 0 #> 1352 3.067326986 1 #> 1353 0.473926956 0 #> 1354 1.298623007 1 #> 1355 3.258243489 0 #> 1356 0.204260212 1 #> 1357 0.489704411 0 #> 1358 1.879326036 1 #> 1359 2.684365675 1 #> 1360 0.887425329 0 #> 1361 2.254976718 0 #> 1362 3.711248257 0 #> 1363 0.414244899 0 #> 1364 2.116840634 1 #> 1365 3.964227805 0 #> 1366 1.960779131 1 #> 1367 1.244951241 1 #> 1368 0.257105666 0 #> 1369 3.982167541 0 #> 1370 0.665484476 0 #> 1371 1.428216676 1 #> 1372 3.062771929 1 #> 1373 1.271818542 1 #> 1374 1.911339507 0 #> 1375 2.193950911 0 #> 1376 1.086370297 1 #> 1377 1.620676501 1 #> 1378 0.311196204 0 #> 1379 1.623128540 1 #> 1380 4.423406202 0 #> 1381 0.855283205 0 #> 1382 3.923515727 0 #> 1383 0.506630619 0 #> 1384 0.873399828 0 #> 1385 3.285704616 1 #> 1386 1.216115555 1 #> 1387 0.945282624 0 #> 1388 2.621404139 0 #> 1389 0.379530494 0 #> 1390 2.123576323 1 #> 1391 1.376010010 1 #> 1392 4.008161638 0 #> 1393 0.952130245 0 #> 1394 2.344615369 1 #> 1395 0.063726362 0 #> 1396 2.370674671 1 #> 1397 1.734973641 0 #> 1398 0.006902319 0 #> 1399 2.548725641 1 #> 1400 2.015216648 1 #> 1401 2.771484983 1 #> 1402 0.225959567 0 #> 1403 2.937351170 1 #> 1404 1.453556688 1 #> 1405 0.713030358 0 #> 1406 0.953434275 0 #> 1407 1.675419338 1 #> 1408 3.031596036 1 #> 1409 0.704895836 0 #> 1410 1.816949506 1 #> 1411 1.181580860 1 #> 1412 1.573197027 1 #> 1413 0.509265080 0 #> 1414 1.320164426 1 #> 1415 0.594503218 0 #> 1416 2.061897666 1 #> 1417 3.310262246 0 #> 1418 0.242321205 0 #> 1419 1.766747249 1 #> 1420 3.786988940 0 #> 1421 1.790455032 1 #> 1422 2.053665507 1 #> 1423 4.311654189 0 #> 1424 3.491522968 0 #> 1425 2.145231544 0 #> 1426 4.430563783 0 #> 1427 1.330252999 1 #> 1428 0.816027368 0 #> 1429 3.476496304 0 #> 1430 3.918252129 1 #> 1431 1.408670136 0 #> 1432 4.114192570 0 #> 1433 4.117992708 0 #> 1434 3.633742825 0 #> 1435 1.587766515 1 #> 1436 3.040078925 1 #> 1437 1.210036020 0 #> 1438 4.309786457 1 #> 1439 0.546201744 0 #> 1440 1.453385480 1 #> 1441 2.829538041 1 #> 1442 1.088682731 1 #> 1443 4.179354237 0 #> 1444 2.667606662 1 #> 1445 1.624125183 0 #> 1446 2.737612299 1 #> 1447 2.714103225 0 #> 1448 3.964514463 0 #> 1449 2.837506368 1 #> 1450 3.896426670 0 #> 1451 4.151317126 0 #> 1452 2.559504561 0 #> 1453 3.359769100 1 #> 1454 1.763834182 1 #> 1455 0.636698848 0 #> 1456 4.253034109 1 #> 1457 1.093194606 0 #> 1458 0.100105558 0 #> 1459 1.025074393 0 #> 1460 1.064104941 0 #> 1461 2.503310852 1 #> 1462 2.982176742 1 #> 1463 2.242913834 1 #> 1464 0.520079891 0 #> 1465 2.895930358 1 #> 1466 2.822177131 1 #> 1467 1.149661018 1 #> 1468 1.060896403 1 #> 1469 1.589983191 1 #> 1470 1.382421108 1 #> 1471 3.468430908 0 #> 1472 1.027803075 0 #> 1473 2.071477183 0 #> 1474 3.771119573 0 #> 1475 1.154081388 1 #> 1476 2.071684707 1 #> 1477 3.754200518 0 #> 1478 1.486214050 1 #> 1479 2.274228374 1 #> 1480 3.472502099 1 #> 1481 0.808619693 0 #> 1482 4.467386840 1 #> 1483 4.303522167 0 #> 1484 2.327778858 0 #> 1485 0.546223563 0 #> 1486 2.533752501 1 #> 1487 0.168539686 1 #> 1488 4.293340836 0 #> 1489 0.054564280 0 #> 1490 2.594851644 1 #> 1491 3.341328358 0 #> 1492 0.849002608 1 #> 1493 1.336836241 1 #> 1494 2.011439936 0 #> 1495 1.761494687 1 #> 1496 2.956695221 1 #> 1497 2.762771313 1 #> 1498 3.279634736 0 #> 1499 1.441955397 1 #> 1500 0.648884946 0 #> 1501 0.242599499 0 #> 1502 4.297930963 1 #> 1503 0.115204232 0 #> 1504 4.143434126 1 #> 1505 1.649991352 1 #> 1506 3.142766461 1 #> 1507 2.562085561 1 #> 1508 1.278050114 1 #> 1509 0.051164634 0 #> 1510 1.896174086 0 #> 1511 2.764316213 1 #> 1512 0.021399174 0 #> 1513 2.986196825 1 #> 1514 0.520439081 0 #> 1515 4.060325611 0 #> 1516 0.454494554 0 #> 1517 2.544369559 1 #> 1518 1.131442529 1 #> 1519 2.615381550 0 #> 1520 4.286356674 0 #> 1521 3.272754614 1 #> 1522 1.820576932 1 #> 1523 2.215639819 1 #> 1524 3.024631573 1 #> 1525 2.107045024 1 #> 1526 1.330839099 1 #> 1527 2.457754074 0 #> 1528 3.307615291 0 #> 1529 3.472263904 0 #> 1530 3.664769524 0 #> 1531 1.499078425 1 #> 1532 4.010600547 0 #> 1533 1.389165287 0 #> 1534 3.144459537 0 #> 1535 0.870637112 1 #> 1536 4.395184197 0 #> 1537 0.760916615 0 #> 1538 0.766920222 0 #> 1539 2.826406822 1 #> 1540 3.303879910 1 #> 1541 4.226009588 0 #> 1542 3.457332949 0 #> 1543 0.748384351 0 #> 1544 1.261328193 1 #> 1545 1.913695676 1 #> 1546 3.767820743 0 #> 1547 0.681771267 0 #> 1548 2.996342003 1 #> 1549 3.681376752 0 #> 1550 3.031282259 1 #> 1551 1.689646174 0 #> 1552 3.979511877 0 #> 1553 2.569647174 0 #> 1554 2.114764952 1 #> 1555 2.862407214 0 #> 1556 3.332690776 1 #> 1557 0.656449187 0 #> 1558 1.828814761 1 #> 1559 2.062302114 0 #> 1560 2.512102543 0 #> 1561 1.843604763 1 #> 1562 4.491537968 1 #> 1563 3.376237751 0 #> 1564 0.848020303 0 #> 1565 0.489340093 0 #> 1566 3.347166854 0 #> 1567 0.517847114 0 #> 1568 4.490191535 0 #> 1569 3.501549699 0 #> 1570 1.836823679 0 #> 1571 1.252049855 1 #> 1572 4.305131425 1 #> 1573 1.145394022 0 #> 1574 0.540477916 0 #> 1575 2.452455381 1 #> 1576 3.030877972 0 #> 1577 1.684498594 0 #> 1578 0.662021618 0 #> 1579 4.360526985 1 #> 1580 0.311565575 0 #> 1581 2.710743272 1 #> 1582 0.876907574 0 #> 1583 2.538782341 1 #> 1584 0.664209619 0 #> 1585 3.708416665 0 #> 1586 1.482866589 1 #> 1587 2.142445599 0 #> 1588 0.854026113 0 #> 1589 2.337464856 0 #> 1590 2.227911819 0 #> 1591 0.637485801 0 #> 1592 3.389763510 0 #> 1593 0.049161730 0 #> 1594 0.800828794 0 #> 1595 0.511543097 0 #> 1596 2.415163653 0 #> 1597 2.454410158 0 #> 1598 0.094147207 1 #> 1599 0.678296017 0 #> 1600 2.503518856 0 #> 1601 3.395375416 1 #> 1602 2.976038827 1 #> 1603 3.446097532 1 #> 1604 0.642789155 0 #> 1605 2.637197866 1 #> 1606 3.182709816 1 #> 1607 1.890416424 1 #> 1608 4.459037293 1 #> 1609 0.387081721 1 #> 1610 2.471018960 0 #> 1611 1.704080210 1 #> 1612 1.744742383 1 #> 1613 1.463892011 1 #> 1614 4.484054714 0 #> 1615 3.358836431 0 #> 1616 3.509054819 0 #> 1617 4.071015298 0 #> 1618 3.000262477 1 #> 1619 3.113228782 1 #> 1620 4.257312414 0 #> 1621 0.583195668 0 #> 1622 4.277549747 0 #> 1623 4.286875035 1 #> 1624 0.395337046 0 #> 1625 3.797266080 0 #> 1626 3.407052423 1 #> 1627 2.647957782 0 #> 1628 1.372511499 0 #> 1629 0.061537706 0 #> 1630 1.454365793 1 #> 1631 0.764521416 0 #> 1632 0.984424851 0 #> 1633 2.126991288 1 #> 1634 0.036134027 1 #> 1635 3.495432628 0 #> 1636 3.561395585 0 #> 1637 0.535586216 0 #> 1638 0.871314529 0 #> 1639 4.497025870 0 #> 1640 4.064541302 0 #> 1641 0.023973038 0 #> 1642 3.257053777 1 #> 1643 1.830338838 1 #> 1644 0.103132995 1 #> 1645 1.789202608 1 #> 1646 0.798913655 0 #> 1647 1.140965077 1 #> 1648 4.111401421 0 #> 1649 1.686900518 1 #> 1650 1.348943160 1 #> 1651 3.469842118 1 #> 1652 0.064425002 0 #> 1653 0.859407487 0 #> 1654 4.496877347 0 #> 1655 0.083853435 1 #> 1656 3.230465497 1 #> 1657 2.418089548 1 #> 1658 1.761598233 1 #> 1659 2.246732976 1 #> 1660 4.454668702 0 #> 1661 2.226481852 0 #> 1662 4.395054057 1 #> 1663 3.365653555 1 #> 1664 3.080272057 1 #> 1665 2.226361510 0 #> 1666 0.245327842 1 #> 1667 3.515127257 0 #> 1668 1.558304604 1 #> 1669 0.099795196 0 #> 1670 2.802485444 1 #> 1671 0.583298340 0 #> 1672 0.809316970 0 #> 1673 2.863710510 1 #> 1674 0.759295625 0 #> 1675 1.629370234 1 #> 1676 0.994160272 0 #> 1677 3.724258600 0 #> 1678 0.016392330 0 #> 1679 0.708821451 0 #> 1680 4.217419199 0 #> 1681 3.444467726 1 #> 1682 3.697349319 0 #> 1683 1.133104922 1 #> 1684 0.529000755 0 #> 1685 0.597805113 0 #> 1686 1.887120109 0 #> 1687 1.646426296 1 #> 1688 0.651480478 0 #> 1689 2.339328954 0 #> 1690 3.356056699 1 #> 1691 0.494024371 0 #> 1692 1.663211143 1 #> 1693 1.000943359 0 #> 1694 4.036382868 0 #> 1695 0.478569520 0 #> 1696 3.775498142 0 #> 1697 3.804162835 0 #> 1698 0.121124344 0 #> 1699 3.444066930 0 #> 1700 1.236713577 1 #> 1701 0.679106822 0 #> 1702 0.444139970 0 #> 1703 3.201095143 0 #> 1704 2.052979342 1 #> 1705 1.796116647 1 #> 1706 2.771788690 1 #> 1707 0.597465494 0 #> 1708 0.362887231 1 #> 1709 2.984375437 1 #> 1710 3.570934045 1 #> 1711 1.680148956 1 #> 1712 3.594992179 1 #> 1713 3.647785796 0 #> 1714 3.890773370 0 #> 1715 1.902374392 0 #> 1716 0.431424813 0 #> 1717 3.971673571 0 #> 1718 1.299014174 1 #> 1719 1.372987000 1 #> 1720 3.672473287 0 #> 1721 2.640997830 0 #> 1722 2.982320082 1 #> 1723 2.899882957 1 #> 1724 1.027213921 0 #> 1725 2.744636299 1 #> 1726 2.188546414 1 #> 1727 2.610086110 1 #> 1728 3.657024046 0 #> 1729 2.226668769 0 #> 1730 0.369149550 0 #> 1731 2.087099662 0 #> 1732 2.692673007 1 #> 1733 4.112452837 0 #> 1734 0.216111472 1 #> 1735 3.681429234 0 #> 1736 0.394401722 0 #> 1737 1.219355745 1 #> 1738 3.813354502 0 #> 1739 4.134188565 0 #> 1740 0.369186612 0 #> 1741 2.509042351 0 #> 1742 0.192281263 0 #> 1743 1.174000974 1 #> 1744 0.845839113 0 #> 1745 2.553377292 0 #> 1746 0.295566747 0 #> 1747 1.968968464 0 #> 1748 2.488961390 1 #> 1749 2.430903571 0 #> 1750 1.145217282 1 #> 1751 0.743304253 0 #> 1752 3.275014850 1 #> 1753 0.927710372 0 #> 1754 2.639094868 1 #> 1755 4.110956899 0 #> 1756 0.931349703 0 #> 1757 3.743177208 0 #> 1758 1.390089359 1 #> 1759 0.847901164 0 #> 1760 2.335251229 1 #> 1761 0.828160292 0 #> 1762 1.009251488 1 #> 1763 4.309136322 0 #> 1764 0.869014505 0 #> 1765 4.373422528 0 #> 1766 4.188249843 1 #> 1767 0.983419815 0 #> 1768 1.616633349 0 #> 1769 0.433827101 0 #> 1770 3.902884023 0 #> 1771 4.480417644 0 #> 1772 2.574513697 0 #> 1773 2.658644690 1 #> 1774 3.151492736 1 #> 1775 2.583322354 1 #> 1776 0.734766527 0 #> 1777 2.386551628 1 #> 1778 2.246417435 0 #> 1779 4.139858569 1 #> 1780 2.036366386 1 #> 1781 1.907909539 1 #> 1782 0.346707311 0 #> 1783 4.174971286 0 #> 1784 1.408902957 1 #> 1785 1.857061626 1 #> 1786 1.776536399 0 #> 1787 3.119723170 1 #> 1788 2.664867707 1 #> 1789 0.678085591 0 #> 1790 1.540908840 1 #> 1791 2.554564959 0 #> 1792 3.419727060 1 #> 1793 3.982770111 0 #> 1794 3.324171340 0 #> 1795 1.957947416 0 #> 1796 0.092105786 0 #> 1797 4.050729552 1 #> 1798 0.562672234 0 #> 1799 4.485628127 1 #> 1800 0.290802837 1 #> 1801 3.720979272 0 #> 1802 1.602010634 1 #> 1803 1.808233517 1 #> 1804 4.351890740 0 #> 1805 2.422934389 0 #> 1806 2.837074642 1 #> 1807 1.494761842 1 #> 1808 0.463147260 1 #> 1809 4.433948196 1 #> 1810 3.012335459 1 #> 1811 0.006949337 1 #> 1812 1.646492059 1 #> 1813 2.395055623 1 #> 1814 2.498952458 1 #> 1815 2.447324787 0 #> 1816 2.473935481 0 #> 1817 2.630301104 0 #> 1818 0.282121728 0 #> 1819 0.268371018 1 #> 1820 4.038087699 0 #> 1821 2.635148570 0 #> 1822 3.712233983 0 #> 1823 2.584934549 1 #> 1824 1.509131558 0 #> 1825 4.031624595 0 #> 1826 0.309835889 0 #> 1827 3.148618552 1 #> 1828 0.246115120 0 #> 1829 3.904524445 0 #> 1830 3.703082733 1 #> 1831 0.761206088 0 #> 1832 3.671669452 0 #> 1833 2.027236866 0 #> 1834 1.133956075 0 #> 1835 2.592117967 0 #> 1836 3.076349898 1 #> 1837 2.732726290 0 #> 1838 3.027445650 1 #> 1839 1.097546783 1 #> 1840 4.288158369 0 #> 1841 4.187037639 0 #> 1842 3.148020826 1 #> 1843 1.216556782 1 #> 1844 4.380089799 0 #> 1845 0.239535453 0 #> 1846 2.694202911 1 #> 1847 2.953522413 1 #> 1848 3.476992960 0 #> 1849 3.360746509 1 #> 1850 3.787226868 0 #> 1851 3.723514400 0 #> 1852 2.109865270 1 #> 1853 0.774035031 1 #> 1854 4.423322172 0 #> 1855 1.808800279 1 #> 1856 3.447726950 0 #> 1857 0.414076386 0 #> 1858 4.029329521 0 #> 1859 3.603953785 0 #> 1860 2.832019366 1 #> 1861 2.861847106 1 #> 1862 4.058192394 1 #> 1863 3.688106379 0 #> 1864 2.245204630 0 #> 1865 3.278237850 1 #> 1866 3.514301233 0 #> 1867 1.222846432 1 #> 1868 3.215614251 1 #> 1869 2.570802715 1 #> 1870 4.011735175 0 #> 1871 0.126761225 0 #> 1872 3.055490544 0 #> 1873 3.116245384 1 #> 1874 2.569680580 1 #> 1875 3.751660108 0 #> 1876 1.326638734 1 #> 1877 0.857639156 0 #> 1878 0.760929835 0 #> 1879 0.073524192 1 #> 1880 0.515986700 0 #> 1881 0.287554162 0 #> 1882 3.624500209 0 #> 1883 0.597729762 0 #> 1884 0.406032342 0 #> 1885 4.017123676 0 #> 1886 3.302303931 1 #> 1887 2.256250913 0 #> 1888 1.244737809 0 #> 1889 0.485532515 0 #> 1890 3.811618271 0 #> 1891 3.198562733 1 #> 1892 3.623632173 0 #> 1893 0.065305834 0 #> 1894 1.141317910 1 #> 1895 1.811000915 1 #> 1896 1.492224415 1 #> 1897 3.902017787 0 #> 1898 0.787414807 0 #> 1899 1.648342864 1 #> 1900 0.125065968 1 #> 1901 4.068576821 0 #> 1902 3.784842028 0 #> 1903 4.336645245 0 #> 1904 2.771832904 0 #> 1905 0.546464756 0 #> 1906 4.164139109 0 #> 1907 0.560706518 0 #> 1908 2.502357907 1 #> 1909 0.811074494 0 #> 1910 4.447300754 0 #> 1911 3.156763231 1 #> 1912 1.146118922 0 #> 1913 3.591735129 1 #> 1914 1.684325422 1 #> 1915 3.990127019 1 #> 1916 0.614414948 0 #> 1917 4.063990903 0 #> 1918 4.060566644 0 #> 1919 3.865394256 0 #> 1920 2.393539877 0 #> 1921 3.718530796 0 #> 1922 4.207942870 1 #> 1923 2.541997291 1 #> 1924 1.775312234 1 #> 1925 0.842548981 0 #> 1926 3.975748027 0 #> 1927 1.052415180 1 #> 1928 4.249470679 0 #> 1929 2.961968507 1 #> 1930 0.717895663 0 #> 1931 4.292389555 0 #> 1932 0.698887171 0 #> 1933 4.301973378 0 #> 1934 2.935558127 1 #> 1935 0.121688021 0 #> 1936 1.902964334 0 #> 1937 0.909634721 0 #> 1938 2.790213964 0 #> 1939 4.149314139 0 #> 1940 2.595683317 1 #> 1941 0.646377744 0 #> 1942 1.642881539 1 #> 1943 0.239892993 0 #> 1944 0.520046832 0 #> 1945 3.265577697 0 #> 1946 0.756659711 0 #> 1947 4.313020654 1 #> 1948 0.272067272 0 #> 1949 4.380634973 0 #> 1950 2.214850986 0 #> 1951 3.163144980 0 #> 1952 3.257240270 1 #> 1953 3.438605650 0 #> 1954 3.957421575 1 #> 1955 3.205314594 0 #> 1956 1.102535964 0 #> 1957 2.217531367 0 #> 1958 3.409419397 1 #> 1959 0.001680653 1 #> 1960 0.377250721 1 #> 1961 3.494622737 0 #> 1962 1.320851908 1 #> 1963 1.565166512 1 #> 1964 2.921029339 1 #> 1965 3.796779114 0 #> 1966 0.310836138 0 #> 1967 1.194022864 1 #> 1968 3.196441322 0 #> 1969 0.229809770 1 #> 1970 1.509663712 1 #> 1971 4.020654240 0 #> 1972 1.026134304 0 #> 1973 2.573839551 1 #> 1974 0.859703578 0 #> 1975 4.498934576 0 #> 1976 2.258323393 1 #> 1977 3.690267801 0 #> 1978 2.866942594 1 #> 1979 3.837588064 0 #> 1980 3.091975978 0 #> 1981 3.498813985 1 #> 1982 0.659926008 0 #> 1983 1.229064782 1 #> 1984 1.171894944 0 #> 1985 1.599890341 1 #> 1986 1.174188110 0 #> 1987 3.849246447 0 #> 1988 3.306866626 0 #> 1989 3.844406748 0 #> 1990 3.304374919 0 #> 1991 3.240197889 0 #> 1992 4.425026736 0 #> 1993 0.728673141 0 #> 1994 3.447809453 0 #> 1995 4.292861501 1 #> 1996 1.196582349 1 #> 1997 0.386269065 0 #> 1998 1.030165886 1 #> 1999 1.495932853 1 #> 2000 4.283095539 0 #> 2001 4.454845134 0 #> 2002 1.973221257 1 #> 2003 3.149564479 0 #> 2004 4.000846300 0 #> 2005 3.753717629 0 #> 2006 3.304896572 1 #> 2007 2.911064883 1 #> 2008 3.792952204 0 #> 2009 0.718385632 0 #> 2010 1.636678023 1 #> 2011 1.237916290 1 #> 2012 0.561575351 0 #> 2013 2.545321271 1 #> 2014 3.029581003 1 #> 2015 0.007664085 0 #> 2016 3.604145501 0 #> 2017 0.892092896 0 #> 2018 3.000354475 1 #> 2019 3.544804389 0 #> 2020 4.284816620 1 #> 2021 1.722049098 1 #> 2022 2.368699566 0 #> 2023 1.747593517 0 #> 2024 0.592774201 0 #> 2025 3.634732883 0 #> 2026 3.088123596 1 #> 2027 1.318943291 1 #> 2028 1.889770289 1 #> 2029 3.308674743 1 #> 2030 3.824195605 0 #> 2031 0.348590649 0 #> 2032 1.277389146 1 #> 2033 0.494167450 0 #> 2034 0.998726392 0 #> 2035 0.211747200 0 #> 2036 0.273947167 0 #> 2037 2.401335882 0 #> 2038 0.442348160 0 #> 2039 1.882558690 1 #> 2040 0.543313809 0 #> 2041 4.163988199 1 #> 2042 0.043332829 0 #> 2043 2.175012902 0 #> 2044 3.407510245 0 #> 2045 4.104416874 1 #> 2046 3.498611790 0 #> 2047 4.383567312 0 #> 2048 0.729363616 0 #> 2049 1.402807813 1 #> 2050 1.979353781 0 #> 2051 2.930194949 0 #> 2052 3.107694917 1 #> 2053 0.895883482 0 #> 2054 3.598410662 0 #> 2055 3.463829328 0 #> 2056 2.967070550 1 #> 2057 0.630560058 0 #> 2058 3.007224122 1 #> 2059 0.685503607 0 #> 2060 2.600454550 1 #> 2061 2.761336102 1 #> 2062 0.678260907 0 #> 2063 2.412804340 1 #> 2064 2.571634925 0 #> 2065 2.716107669 1 #> 2066 3.786105721 0 #> 2067 2.374373183 0 #> 2068 1.105253701 1 #> 2069 1.343368253 0 #> 2070 3.807665549 0 #> 2071 2.016914585 1 #> 2072 3.138282305 1 #> 2073 4.263304100 0 #> 2074 2.578883560 0 #> 2075 2.217875654 1 #> 2076 2.237661455 0 #> 2077 0.421514706 0 #> 2078 4.314140702 0 #> 2079 0.896302021 0 #> 2080 2.397810084 0 #> 2081 0.608719859 0 #> 2082 1.083177931 0 #> 2083 0.828162616 0 #> 2084 2.972505350 0 #> 2085 0.466376882 0 #> 2086 1.261120539 0 #> 2087 0.019447462 0 #> 2088 1.014568137 0 #> 2089 3.367229542 0 #> 2090 0.128231799 0 #> 2091 3.354238819 1 #> 2092 2.794729191 1 #> 2093 1.804776868 1 #> 2094 1.542025381 1 #> 2095 1.055677887 0 #> 2096 3.437572155 0 #> 2097 0.937546688 0 #> 2098 1.011523426 1 #> 2099 2.947299844 0 #> 2100 2.235146451 0 #> 2101 2.653282985 0 #> 2102 1.947506327 0 #> 2103 2.985108318 0 #> 2104 2.808943552 1 #> 2105 2.258685243 0 #> 2106 1.341325793 1 #> 2107 3.294164345 0 #> 2108 3.797121007 0 #> 2109 3.000665310 1 #> 2110 2.271156078 1 #> 2111 3.202580005 1 #> 2112 4.390396180 0 #> 2113 3.105176088 1 #> 2114 4.479553975 0 #> 2115 4.282794690 0 #> 2116 3.426768798 0 #> 2117 0.655671370 0 #> 2118 0.788536631 0 #> 2119 4.204189227 1 #> 2120 2.159065254 0 #> 2121 1.660999742 1 #> 2122 1.464332898 1 #> 2123 2.133425998 0 #> 2124 4.189533859 1 #> 2125 2.395401499 0 #> 2126 4.124343375 0 #> 2127 1.471495913 1 #> 2128 1.368697949 0 #> 2129 0.023974255 0 #> 2130 2.171368712 1 #> 2131 1.697246843 0 #> 2132 0.619323967 0 #> 2133 2.324271477 1 #> 2134 3.614829244 0 #> 2135 0.185082165 0 #> 2136 3.210123917 0 #> 2137 3.189688280 1 #> 2138 4.029726263 0 #> 2139 1.238230499 1 #> 2140 0.606623179 0 #> 2141 4.167699146 0 #> 2142 2.893792773 0 #> 2143 2.720000113 1 #> 2144 1.363062451 1 #> 2145 0.968037635 1 #> 2146 3.688723154 0 #> 2147 2.549713608 0 #> 2148 4.070373689 0 #> 2149 2.707360519 1 #> 2150 0.903352138 0 #> 2151 3.686076481 0 #> 2152 2.953650448 1 #> 2153 1.969527227 1 #> 2154 0.619760889 0 #> 2155 0.094532790 0 #> 2156 3.187310387 0 #> 2157 0.435859963 0 #> 2158 0.378914203 0 #> 2159 0.880439310 0 #> 2160 4.434002393 0 #> 2161 2.992692264 1 #> 2162 4.446964065 1 #> 2163 1.745481576 1 #> 2164 3.662696602 0 #> 2165 1.212686596 0 #> 2166 2.148714563 0 #> 2167 0.895886539 1 #> 2168 3.357556926 1 #> 2169 2.524836927 1 #> 2170 0.971243792 0 #> 2171 0.887690876 0 #> 2172 0.259627467 0 #> 2173 1.554048819 0 #> 2174 2.799233167 1 #> 2175 0.781265820 0 #> 2176 0.026533283 0 #> 2177 0.371384539 0 #> 2178 0.855029076 0 #> 2179 3.736160188 0 #> 2180 1.788968574 1 #> 2181 0.422263327 0 #> 2182 4.004310803 0 #> 2183 2.380988403 0 #> 2184 3.716450432 0 #> 2185 1.282294737 1 #> 2186 3.501801490 0 #> 2187 0.652162584 0 #> 2188 1.021845970 0 #> 2189 2.710364991 1 #> 2190 4.015385767 0 #> 2191 2.904641227 1 #> 2192 1.946923480 0 #> 2193 4.036520678 0 #> 2194 4.255055822 1 #> 2195 2.823725735 1 #> 2196 0.373581125 1 #> 2197 2.002209954 1 #> 2198 1.627203579 1 #> 2199 4.479175089 0 #> 2200 2.247070146 0 #> 2201 1.159894138 0 #> 2202 3.259976700 1 #> 2203 0.710488051 0 #> 2204 1.419558648 1 #> 2205 1.333284933 1 #> 2206 3.057627869 1 #> 2207 2.052181360 1 #> 2208 0.087240635 0 #> 2209 3.266505924 0 #> 2210 1.471804814 1 #> 2211 2.975572397 1 #> 2212 1.597780214 1 #> 2213 2.060505451 0 #> 2214 2.632433456 1 #> 2215 0.881295074 0 #> 2216 1.165297523 1 #> 2217 3.915890767 0 #> 2218 0.536707585 0 #> 2219 3.691081773 0 #> 2220 2.574828714 1 #> 2221 1.054873626 0 #> 2222 2.583091999 1 #> 2223 3.392500624 0 #> 2224 0.462955576 0 #> 2225 3.031540694 0 #> 2226 0.509341023 0 #> 2227 3.834178740 0 #> 2228 1.795281833 1 #> 2229 2.517621075 1 #> 2230 2.184715635 0 #> 2231 0.571144456 0 #> 2232 3.773524494 0 #> 2233 3.549905676 1 #> 2234 2.985847156 1 #> 2235 1.048893913 0 #> 2236 4.291895550 0 #> 2237 3.154391423 0 #> 2238 2.632537878 1 #> 2239 4.287975567 0 #> 2240 4.103318743 0 #> 2241 0.350885638 0 #> 2242 0.303995592 1 #> 2243 4.233804752 0 #> 2244 0.752786515 0 #> 2245 4.103990561 0 #> 2246 0.757429188 0 #> 2247 1.343285597 0 #> 2248 0.173374081 1 #> 2249 1.803607245 0 #> 2250 2.757686236 1 #> 2251 1.108820621 0 #> 2252 0.103626483 0 #> 2253 1.278963797 1 #> 2254 3.658017076 0 #> 2255 3.235132733 1 #> 2256 2.383095347 1 #> 2257 0.829517598 0 #> 2258 3.022299579 1 #> 2259 1.910363941 1 #> 2260 2.527494416 1 #> 2261 1.992547714 0 #> 2262 4.198806725 0 #> 2263 2.076897996 1 #> 2264 2.830425646 1 #> 2265 2.573961847 0 #> 2266 3.078424175 1 #> 2267 4.251688561 0 #> 2268 0.152051130 0 #> 2269 1.466438545 0 #> 2270 3.621000968 0 #> 2271 0.960037138 0 #> 2272 1.775668747 1 #> 2273 3.536561518 1 #> 2274 0.098670670 1 #> 2275 2.916911574 1 #> 2276 2.587435069 0 #> 2277 2.669406324 1 #> 2278 2.667885269 1 #> 2279 3.252311335 1 #> 2280 3.385061498 0 #> 2281 0.355433641 0 #> 2282 3.281185646 0 #> 2283 3.852792365 0 #> 2284 3.205348814 0 #> 2285 3.037752114 1 #> 2286 4.394154255 0 #> 2287 3.731747561 0 #> 2288 4.262766510 1 #> 2289 1.236362704 1 #> 2290 2.583576987 0 #> 2291 0.147338820 0 #> 2292 1.996930990 0 #> 2293 1.412926980 1 #> 2294 1.024160958 0 #> 2295 0.820097544 0 #> 2296 3.748109184 0 #> 2297 4.440978425 0 #> 2298 0.853618197 0 #> 2299 1.528345797 1 #> 2300 2.074290450 0 #> 2301 1.865794467 0 #> 2302 3.806912047 0 #> 2303 3.852468687 0 #> 2304 2.032142642 0 #> 2305 3.296183237 1 #> 2306 3.041849249 1 #> 2307 3.372963975 0 #> 2308 4.316507234 0 #> 2309 4.480996997 0 #> 2310 4.411592740 0 #> 2311 2.546849421 0 #> 2312 4.122002496 0 #> 2313 4.372296167 0 #> 2314 4.335424522 0 #> 2315 2.700645506 1 #> 2316 0.882260272 0 #> 2317 0.325257888 0 #> 2318 1.834401452 0 #> 2319 0.058344016 0 #> 2320 4.451917227 1 #> 2321 3.339232512 1 #> 2322 3.619425213 0 #> 2323 0.714765753 0 #> 2324 3.680416877 0 #> 2325 2.325328392 1 #> 2326 4.027701825 0 #> 2327 4.329987618 0 #> 2328 3.444386379 0 #> 2329 2.860978296 1 #> 2330 4.290395386 1 #> 2331 1.741584838 1 #> 2332 1.120744131 1 #> 2333 0.122135259 0 #> 2334 1.581068044 0 #> 2335 0.952503342 0 #> 2336 1.413670546 1 #> 2337 1.270965236 1 #> 2338 1.323739640 1 #> 2339 3.388848154 1 #> 2340 1.894003504 1 #> 2341 3.085265154 0 #> 2342 4.275962546 1 #> 2343 2.275066857 0 #> 2344 0.853007634 0 #> 2345 2.571837220 0 #> 2346 3.030270745 0 #> 2347 1.739817883 0 #> 2348 4.350184621 0 #> 2349 2.304256878 1 #> 2350 0.165973604 0 #> 2351 2.731786630 1 #> 2352 3.674716401 0 #> 2353 3.030035906 1 #> 2354 0.704345230 0 #> 2355 4.347887711 0 #> 2356 4.158008217 0 #> 2357 0.598787899 0 #> 2358 3.548837810 1 #> 2359 4.184405263 0 #> 2360 2.903035036 1 #> 2361 3.370738230 1 #> 2362 2.064012409 1 #> 2363 0.275100353 0 #> 2364 0.150349755 0 #> 2365 1.758923666 1 #> 2366 0.846836962 0 #> 2367 1.190530194 1 #> 2368 0.902850033 0 #> 2369 0.789344394 0 #> 2370 4.033099328 0 #> 2371 0.279171849 1 #> 2372 1.850094399 1 #> 2373 1.397776764 1 #> 2374 1.938197902 1 #> 2375 1.492427552 1 #> 2376 1.072047971 0 #> 2377 1.679136264 1 #> 2378 2.208137563 0 #> 2379 0.088407481 1 #> 2380 0.132803493 0 #> 2381 3.017589253 1 #> 2382 3.710468046 0 #> 2383 3.475225648 0 #> 2384 3.450447010 0 #> 2385 3.533093181 0 #> 2386 4.130039596 0 #> 2387 3.508063293 0 #> 2388 1.892651744 1 #> 2389 2.607559585 1 #> 2390 3.589646915 0 #> 2391 4.180479374 1 #> 2392 0.509909974 0 #> 2393 0.856760525 0 #> 2394 3.470249323 0 #> 2395 0.494935204 0 #> 2396 2.819562290 1 #> 2397 2.845157977 1 #> 2398 3.899783755 0 #> 2399 3.016484184 0 #> 2400 3.810133240 0 #> 2401 1.024549881 0 #> 2402 0.599500005 0 #> 2403 2.315702094 0 #> 2404 3.072189032 1 #> 2405 2.820463267 1 #> 2406 4.374410108 1 #> 2407 2.915581701 1 #> 2408 1.316940969 0 #> 2409 3.643362952 0 #> 2410 3.489019491 0 #> 2411 3.711105710 0 #> 2412 2.506244069 1 #> 2413 0.034084298 1 #> 2414 2.093103593 0 #> 2415 4.311024075 0 #> 2416 3.441288888 0 #> 2417 3.041126813 1 #> 2418 3.763475536 0 #> 2419 1.278974984 1 #> 2420 1.397394225 1 #> 2421 0.596275655 0 #> 2422 2.681699628 1 #> 2423 3.677779458 0 #> 2424 3.480207083 1 #> 2425 2.828612123 1 #> 2426 0.480343324 0 #> 2427 3.867764357 0 #> 2428 4.174234256 0 #> 2429 2.141784732 0 #> 2430 0.803221400 0 #> 2431 1.817107969 0 #> 2432 4.381788377 1 #> 2433 4.443752870 1 #> 2434 2.405580993 1 #> 2435 0.093939901 0 #> 2436 1.268461298 1 #> 2437 2.934313935 1 #> 2438 4.175564409 0 #> 2439 2.924154639 1 #> 2440 2.440955510 0 #> 2441 3.013015210 1 #> 2442 4.299486835 0 #> 2443 3.202316607 0 #> 2444 1.529419926 1 #> 2445 1.760030916 1 #> 2446 1.354444976 1 #> 2447 3.952129506 0 #> 2448 1.861908295 0 #> 2449 0.031762849 0 #> 2450 0.367104106 1 #> 2451 0.946109201 0 #> 2452 3.017717973 1 #> 2453 2.036611874 0 #> 2454 1.925965909 0 #> 2455 2.541716589 0 #> 2456 0.209133463 1 #> 2457 2.960121802 1 #> 2458 3.166796269 1 #> 2459 3.324146013 0 #> 2460 2.495824132 1 #> 2461 0.295699726 0 #> 2462 2.576009976 1 #> 2463 2.263770456 0 #> 2464 2.047223979 1 #> 2465 3.149636208 0 #> 2466 1.836570720 1 #> 2467 4.084360963 0 #> 2468 1.041877288 0 #> 2469 2.046556023 0 #> 2470 3.559705408 0 #> 2471 4.252978369 1 #> 2472 3.499588852 1 #> 2473 1.751187076 1 #> 2474 3.852405835 0 #> 2475 2.160458011 0 #> 2476 0.660043235 0 #> 2477 2.536397098 0 #> 2478 0.719424140 0 #> 2479 1.384649652 0 #> 2480 3.555232485 1 #> 2481 3.433433395 0 #> 2482 3.783498000 0 #> 2483 0.401335025 0 #> 2484 1.450718840 1 #> 2485 2.239868519 0 #> 2486 0.837858359 0 #> 2487 1.324851586 1 #> 2488 2.799732560 1 #> 2489 1.314738181 1 #> 2490 0.490560150 0 #> 2491 3.938514645 0 #> 2492 3.115686656 1 #> 2493 3.841427747 0 #> 2494 4.292649891 0 #> 2495 4.252416599 1 #> 2496 0.089977235 0 #> 2497 1.781857149 1 #> 2498 1.190420779 0 #> 2499 2.308157003 1 #> 2500 3.426275810 0 #>   ggplot2::ggplot(sim_data) + ggplot2::theme_bw() + ggplot2::aes(x = x) + ggplot2::geom_point(mapping = ggplot2::aes(y = y), alpha = 0.1) + ggplot2::geom_line(mapping = ggplot2::aes(y = pred_select_p, color = \"pred_select_p\")) + ggplot2::stat_function(fun = p, mapping = ggplot2::aes(color = 'p(x)'))   # compare to gam and a binned average sim_data$x2 <- round(sim_data$x, digits = 1) bin_average <-   lapply(split(sim_data, sim_data$x2), function(x) {            data.frame(x = x$x2[1], y = mean(x$y))          }) bin_average <- do.call(rbind, bin_average)  ggplot2::ggplot(sim_data) + ggplot2::theme_bw() + ggplot2::aes(x = x) + ggplot2::stat_function(fun = p, mapping = ggplot2::aes(color = 'p(x)')) + ggplot2::geom_line(mapping = ggplot2::aes(y = pred_select_p, color = \"pred_select_p\")) + ggplot2::stat_smooth(mapping = ggplot2::aes(y = y, color = \"gam\"),                      method = \"gam\",                      formula = y ~ s(x, bs = \"cs\"),                      se = FALSE,                      n = 1000) + ggplot2::geom_line(data = bin_average                    , mapping = ggplot2::aes(y = y, color = \"bin_average\"))"},{"path":"http://www.peteredewitt.com/cpr/reference/cpr_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Polygon Reduction Plots — plot.cpr_cpr","title":"Control Polygon Reduction Plots — plot.cpr_cpr","text":"collection function inspection evaluation control polygon reduction.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/cpr_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Polygon Reduction Plots — plot.cpr_cpr","text":"","code":"# S3 method for cpr_cpr plot(x, type = c(\"cps\", \"loglik\", \"rss\", \"rse\"), from = 1, to, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/cpr_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Polygon Reduction Plots — plot.cpr_cpr","text":"x cpr_cpr object type type diagnostic plot.  \"cps\" control polygons, \"loglik\" log likelihood degrees freedom, \"rse\" residual standard error index. first index x plot last index x plot ... arguments passed plot.cpr_cp","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/generate_cp_formula_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Control Polygon Formula and Data — generate_cp_formula_data","title":"Generate Control Polygon Formula and Data — generate_cp_formula_data","text":"Construct data.frame formula passed regression modeling tool generate control polygon.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/generate_cp_formula_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Control Polygon Formula and Data — generate_cp_formula_data","text":"","code":"generate_cp_formula_data(f, data, formula_only = FALSE, envir = parent.frame())"},{"path":"http://www.peteredewitt.com/cpr/reference/generate_cp_formula_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Control Polygon Formula and Data — generate_cp_formula_data","text":"f formula data data set containing variables formula formula_only TRUE generate formula, FALSE, generate assign data set . envir environment generated formula data set assigned .","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/generate_cp_formula_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Control Polygon Formula and Data — generate_cp_formula_data","text":"TRUE, invisibly.  return needed assignment happens within call.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/generate_cp_formula_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Control Polygon Formula and Data — generate_cp_formula_data","text":"function expected called within cp function expected called end user directly. generate_cp_data exists need build considered varying means model.  y ~ bsplines(x1) + x2 generate rank deficient model matrix---rows bspline basis matrix sum one perfectly collinear implicit intercept term.  Specifying formula y ~ bsplines(x1) + x2 - 1 work x2 continuous variable.  , however, x2 factor, coerced factor, model matrix rank deficient column levels factor generated.  need replace intercept column model matrix bspline.  also needs done variety possible model calls, lm, lmer, etc. returning explicit formula data.frame use fit, hope reduce memory use increase speed cpr method. need know method method.args build data set.  example, geeglm id variable needed data set part method.args formula.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/generate_cp_formula_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Control Polygon Formula and Data — generate_cp_formula_data","text":"","code":"e <- new.env() with(e, {   data <-     data.frame(                  x1 = runif(20)                , x2 = runif(20)                , x3 = runif(20)                , xf = factor(rep(c(\"l1\",\"l2\",\"l3\",\"l4\"), each = 5))                , xc = rep(c(\"c1\",\"c2\",\"c3\",\"c4\", \"c5\"), each = 4)                , pid = gl(n = 2, k = 10)                , pid2 = rep(1:2, each = 10)     )    f <- ~ bsplines(x1, bknots = c(0,1)) + x2 + xf + xc + (x3 | pid2)    cpr:::generate_cp_formula_data(f, data)    stopifnot(isTRUE(     all.equal(               f_for_use               ,               . ~ bsplines(x1, bknots = c(0, 1)) + x2 + (x3 | pid2) + xfl2 + xfl3 + xfl4 + xcc2 + xcc3 + xcc4 + xcc5 - 1               )   ))    stopifnot(isTRUE(identical(     names(data_for_use)     ,     c(\"x1\", \"x2\", \"x3\", \"pid\", \"pid2\", \"xfl2\", \"xfl3\", \"xfl4\", \"xcc2\", \"xcc3\", \"xcc4\", \"xcc5\")   )))  })"},{"path":"http://www.peteredewitt.com/cpr/reference/get_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Control Polygon and the Spline Function — get_spline","title":"Get the Control Polygon and the Spline Function — get_spline","text":"Generate data.frames interpolating plotting spline function, given cpr_cp cpr_cn object.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/get_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Control Polygon and the Spline Function — get_spline","text":"","code":"get_spline(x, margin = 1, at, n = 100)"},{"path":"http://www.peteredewitt.com/cpr/reference/get_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Control Polygon and the Spline Function — get_spline","text":"x cpr_cp cpr_cn object. margin integer identifying marginal control net slice along.  used working x cpr_cn object. point value marginals defined margin.  used x cpr_cn object.  Expected input list length length(attr(x, \"bspline_list\")).  Entries elements marginal ignored.  omitted, midpoint boundary knots marginal used. n length sequence use interpolating spline function.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/get_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Control Polygon and the Spline Function — get_spline","text":"data.frame  n rows two columns x y,  values spline.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/get_spline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Control Polygon and the Spline Function — get_spline","text":"control polygon, cpr\\_cp object, spline function f(x). get_spline returns list two data.frame.  cp element data.frame (x, y) coordinates control points spline element data.frame n rows interpolating f(x). control net, cpr\\_cn object, return cpr\\_cp object, conceptually different.  cpr\\_cp objects uni-variable spline function, cpr\\_cn multi-variable spline surfaces.  get_spline returns \"slice\" higher dimensional object.  example, consider three-dimensional control net defined unit cube marginals x1, x2, x3.  implied spline surface function f(x1, x2, x3). get_spline(x, margin = 2, = list(0.2, NA, 0.5)) return control polygon spline surface f(0.2, x, 0.5). See get_surface taking two-dimensional slice three-plus dimensional control net, , generating useful data set plotting surface two-dimensional control net.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/get_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Control Polygon and the Spline Function — get_spline","text":"","code":"data(spdg, package = \"cpr\")  ## Extract the control polygon and spline for plotting.  We'll use base R ## graphics for this example. a_cp <- cp(pdg ~ bsplines(day, df = 10), data = spdg) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots)  spline <- get_spline(a_cp) plot(spline$x, spline$y, type = \"b\")   # compare to the plot.cpr_cp method plot(a_cp, show_spline = TRUE)"},{"path":"http://www.peteredewitt.com/cpr/reference/get_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Surface — get_surface","title":"Get Surface — get_surface","text":"Get Two-Dimensional Control Net Surface n-dimensional Control Nets","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/get_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Surface — get_surface","text":"","code":"get_surface(x, margin = 1:2, at, n = 100)"},{"path":"http://www.peteredewitt.com/cpr/reference/get_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Surface — get_surface","text":"x cpr_cn object margin integer identifying marginal control net slice along.  used working x cpr_cn object. point value marginals defined margin.  used x cpr_cn object.  Expected input list length length(attr(x, \"bspline_list\")).  Entries elements marginal ignored.  omitted, midpoint boundary knots marginal used. n length sequence use interpolating spline function.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/get_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Surface — get_surface","text":"list two elements cn control net surface data.frame three columns define surface","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/get_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Surface — get_surface","text":"","code":"## Extract the control net and surface from a cpr_cn object. a_cn <- cn(pdg ~ btensor(list(day, age)            , df = list(15, 3)            , bknots = list(c(-1, 1), c(45, 53))            , order = list(3, 2))            , data = spdg)  cn_and_surface <- get_surface(a_cn, n = 50) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) str(cn_and_surface, max.level = 2) #> List of 2 #>  $ cn     :'data.frame':\t45 obs. of  3 variables: #>   ..$ Var1: num [1:45] -1 -0.94 -0.829 -0.726 -0.619 ... #>   ..$ Var2: num [1:45] 45 45 45 45 45 45 45 45 45 45 ... #>   ..$ z   : num [1:45] 0.871 0.986 0.675 0.534 0.448 ... #>  $ surface:'data.frame':\t10000 obs. of  3 variables: #>   ..$ Var1: num [1:10000] -1 -0.98 -0.96 -0.939 -0.919 ... #>   ..$ Var2: num [1:10000] 45 45 45 45 45 45 45 45 45 45 ... #>   ..$ z   : num [1:10000] 0.871 0.938 0.976 0.985 0.967 ...  par(mfrow = c(1, 2)) with(cn_and_surface$cn,      plot3D::persp3D(unique(Var1),                      unique(Var2),                      matrix(z,                             nrow = length(unique(Var1)),                             ncol = length(unique(Var2))),                      main = \"Control Net\")      ) #> Warning: no DISPLAY variable so Tk is not available with(cn_and_surface$surface,      plot3D::persp3D(unique(Var1),                      unique(Var2),                      matrix(z,                             nrow = length(unique(Var1)),                             ncol = length(unique(Var2))),                      main = \"Surface\")      )"},{"path":"http://www.peteredewitt.com/cpr/reference/influence_of_iknots.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the influence of the internal knots of a control polygon — influence_of_iknots","title":"Determine the influence of the internal knots of a control polygon — influence_of_iknots","text":"Determine influence internal knots control polygon","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/influence_of_iknots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the influence of the internal knots of a control polygon — influence_of_iknots","text":"","code":"influence_of_iknots(x, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/influence_of_iknots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the influence of the internal knots of a control polygon — influence_of_iknots","text":"x cpr_cp object ... pass ","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/influence_of_iknots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the influence of the internal knots of a control polygon — influence_of_iknots","text":"","code":"x <- seq(0 + 1/5000, 6 - 1/5000, length.out = 5000) bmat <- bsplines(x, iknots = c(1, 1.5, 2.3, 4, 4.5), bknots = c(0, 6)) theta <- matrix(c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5), ncol = 1) cp0 <- cp(bmat, theta)  icp0 <- influence_of_iknots(cp0)  plot(cp0, icp0$coarsened_cps[[1]], icp0$restored_cps[[1]], color = TRUE, show_spline = TRUE)  plot(cp0, icp0$restored_cps[[1]], color = TRUE, show_spline = TRUE)   plot(cp0, icp0$coarsened_cps[[2]], icp0$restored_cps[[2]], color = TRUE, show_spline = TRUE)  plot(cp0, icp0$restored_cps[[2]], color = TRUE, show_spline = TRUE)   plot(cp0, icp0$coarsened_cps[[3]], icp0$restored_cps[[3]], color = TRUE, show_spline = TRUE)  plot(cp0, icp0$restored_cps[[3]], color = TRUE, show_spline = TRUE)   plot(cp0, icp0$coarsened_cps[[4]], icp0$restored_cps[[4]], color = TRUE, show_spline = TRUE)  plot(cp0, icp0$restored_cps[[4]], color = TRUE, show_spline = TRUE)   plot(cp0, icp0$coarsened_cps[[5]], icp0$restored_cps[[5]], color = TRUE, show_spline = TRUE)  plot(cp0, icp0$restored_cps[[5]], color = TRUE, show_spline = TRUE)   # When the cp was defined by regression df <- data.frame(x = x, y = as.numeric(bmat %*% theta) + rnorm(5000, sd = 0.2)) cp1 <- cp(y ~ bsplines(x, iknots = c(1, 1.5, 2.3, 3, 4, 4.5), bknots = c(0, 6)), data = df) icp1 <- influence_of_iknots(cp1)"},{"path":"http://www.peteredewitt.com/cpr/reference/insert_a_knot.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a Knot into a Control Polygon — insert_a_knot","title":"Insert a Knot into a Control Polygon — insert_a_knot","text":"Insert knot control polygon without changing spline","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/insert_a_knot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a Knot into a Control Polygon — insert_a_knot","text":"","code":"insert_a_knot(x, xi_prime, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/insert_a_knot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a Knot into a Control Polygon — insert_a_knot","text":"x cpr_cp object xi_prime value knot insert ... currently used","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/insert_a_knot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a Knot into a Control Polygon — insert_a_knot","text":"","code":"x <- seq(1e-5, 5.99999, length.out = 100) bmat <- bsplines(x, iknots = c(1, 1.5, 2.3, 4, 4.5), bknots = c(0, 6)) theta <- matrix(c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5), ncol = 1) cp0 <- cp(bmat, theta) cp1 <- insert_a_knot(x = cp0, xi_prime = 3) plot(cp0, cp1, color = TRUE, show_spline = TRUE)"},{"path":"http://www.peteredewitt.com/cpr/reference/knot_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Knot Expressions — knot_expr","title":"Knot Expressions — knot_expr","text":"Non-exported function used build expressions knot sequences labeled well plot.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/knot_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knot Expressions — knot_expr","text":"","code":"knot_expr(x, digits)"},{"path":"http://www.peteredewitt.com/cpr/reference/knot_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knot Expressions — knot_expr","text":"x cpr_cp cpr_bs object digits digits right decimal point report","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/loglikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","title":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","text":"Return, via logLik custom S3 method, (quasi) log likelihood regression object.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/loglikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","text":"","code":"loglikelihood(x, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/loglikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","text":"x regression fit object ... passed logLik","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/loglikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","text":"numeric value (quasi) log likelihood.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/loglikelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","text":"function used cpr cnr determine (quasi) log likelihood returned cpr_cpr cpr_cnr objects. Generally function defaults logLik.  Therefore, S3 method determining (quasi) log likelihood exists workspace everything work.  S3 method exist define one. See methods(loglikelihood) list provided methods.  default method uses logLik.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/loglikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the (quasi) Log Likelihood for a regression object. — loglikelihood","text":"","code":"fit <- lm(mpg ~ wt, data = mtcars) stats::logLik(fit) #> 'log Lik.' -80.01471 (df=3) cpr:::loglikelihood(fit) #> [1] -80.01471"},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank of a Matrix — matrix_rank","title":"Rank of a Matrix — matrix_rank","text":"Determine rank (number linearly independent columns) matrix.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank of a Matrix — matrix_rank","text":"","code":"matrix_rank(x)"},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank of a Matrix — matrix_rank","text":"x numeric matrix","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank of a Matrix — matrix_rank","text":"rank matrix numeric value.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank of a Matrix — matrix_rank","text":"Implementation via Armadillo C++ linear algebra library.  function returns rank matrix x.  computation based singular value decomposition matrix; std::runtime_error exception thrown decomposition fails.  singular values less tolerance treated zeros.  tolerance max(m, n) * max_sv * arma::datum::eps, m number rows x, n number columns x, max_sv maximal singular value x, arma::datum::eps difference 1 least value greater 1 representable.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rank of a Matrix — matrix_rank","text":"Conrad Sanderson Ryan Curtin.  Armadillo: template-based C++ library linear algebra.  Journal Open Source Software, Vol. 1, pp. 26, 2016.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/matrix_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank of a Matrix — matrix_rank","text":"","code":"# Check the rank of a matrix set.seed(42) mat <- matrix(rnorm(25000 * 120), nrow = 25000) matrix_rank(mat) == ncol(mat) #> [1] TRUE matrix_rank(mat) == 120L #> [1] TRUE  # A full rank B-spline basis bmat <- bsplines(seq(0, 1, length = 100), df = 15) #> Warning: At least one x value >= max(bknots) matrix_rank(bmat) == 15L #> [1] TRUE  # A rank deficient B-spline basis bmat <- bsplines(seq(0, 1, length = 100), iknots = c(0.001, 0.002)) #> Warning: At least one x value >= max(bknots) ncol(bmat) == 6L #> [1] TRUE matrix_rank(bmat) == 5L #> [1] TRUE"},{"path":"http://www.peteredewitt.com/cpr/reference/order_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution of Order Statistics — order_statistics","title":"Distribution of Order Statistics — order_statistics","text":"Density distribution function jth order statisitic sample size n known distribution function.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/order_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution of Order Statistics — order_statistics","text":"","code":"d_order_statistic(x, n, j, distribution, ...)  p_order_statistic(q, n, j, distribution, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/order_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution of Order Statistics — order_statistics","text":"x, q vector quantiles n sample size j jth order statisitic distribution character string defining distributioSe see Details ... additional arguments passed density distribution function","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/order_statistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution of Order Statistics — order_statistics","text":"known distribution defined density distribution functions, e.g., normal (dnorm, pnorm), chisq (dchisq, pchisq), define density function jth order statistic, sample size n, $$ \\frac{n!}{(j-1)!(n-j)!} f(x) F(x)^{j-1} (1 - F(x))^{n-j}$$. distribution function $$\\sum_{k = j}^{n} \\binom{n}{k} \\left[F(x)\\right]^{k} \\left[1-F(x)\\right]^{n-k}$$.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/order_statistics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distribution of Order Statistics — order_statistics","text":"Casella G, Berger RL (2002). Statistical Inference. 2nd edition. Duxbury Thomson Learning.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/order_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution of Order Statistics — order_statistics","text":"","code":"# Example 1 # Find the distribution of the minimum from a sample of size 54 from a # standard normal distribution  simulated_data <- matrix(rnorm(n = 54 * 5000), ncol = 54)  # find all the minimums for each of the simulated samples of size 54 mins <- apply(simulated_data, 1, min)  # get the density values x <- seq(-5, 0, length.out = 100) d <- d_order_statistic(x, n = 54, j = 1, distribution = \"norm\")  # plot the histogram and density hist(mins, freq = FALSE) points(x, d, type = \"l\", col = \"red\")   # plot the distribution function plot(ecdf(mins)) points(x, p_order_statistic(q = x,  n = 54, j = 1, distribution = \"norm\"), col = \"red\")   # Example 2 # Find the density and distrubition of the fourth order statistic from a # sample of size 12 from a chisq distribution with 3 degrees of freedom  simulated_data <- matrix(rchisq(n = 12 * 5000, df = 3), ncol = 12)  os4 <- apply(simulated_data, 1, function(x) sort(x)[4])  x <- seq(min(os4), max(os4), length.out = 100) d <- d_order_statistic(x, n = 12, j = 4, distribution = \"chisq\", df = 3) p <- p_order_statistic(x, n = 12, j = 4, distribution = \"chisq\", df = 3)  hist(os4, freq = FALSE); points(x, d, type = \"l\", col = \"red\")  plot(ecdf(os4)); points(x, p, col = \"red\")   # Example 3 # For a set of j observations, find the values for each of the j order # statistics simulated_data <- matrix(rnorm(n = 6 * 5000), ncol = 6) simulated_data <- apply(simulated_data, 1, sort) xs <- apply(simulated_data, 1, range) xs <- apply(xs, 2, function(x) {seq(x[1], x[2], length.out = 100)}) ds <- apply(xs, 1, d_order_statistic, n = 6, j = 1:6, distribution = \"norm\") ps <- apply(xs, 1, p_order_statistic, n = 6, j = 1:6, distribution = \"norm\")  old_par <- par() # save current settings  par(mfrow = c(2, 3)) for (i in 1:6) {   hist(simulated_data[i, ]        , freq = FALSE        , main = substitute(Density~of~X[(ii)], list(ii = i))        , xlab = \"\"   )   points(xs[, i], ds[i, ], type = \"l\", col = \"red\") }   for (i in 1:6) {   plot(ecdf(simulated_data[i, ])        , main = substitute(CDF~of~X[(ii)], list(ii = i))        , ylab = \"\"        , xlab = \"\"        )   points(xs[, i], ps[i, ], type = \"p\", col = \"red\") }   par(mfrow = c(1, 1)) plot(xs[, 1], ps[1, ], type = \"l\", col = 1, xlim = range(xs), ylab = \"\", xlab = \"\") for(i in 2:6) {   points(xs[, i], ps[i, ], type = \"l\", col = i) } legend(\"topleft\", col = 1:6, lty = 1, legend =        c(          expression(CDF~of~X[(1)]),          expression(CDF~of~X[(2)]),          expression(CDF~of~X[(3)]),          expression(CDF~of~X[(4)]),          expression(CDF~of~X[(5)]),          expression(CDF~of~X[(5)])          ))   par(old_par) # reset par to setting prior to running this example #> Warning: graphical parameter \"cin\" cannot be set #> Warning: graphical parameter \"cra\" cannot be set #> Warning: graphical parameter \"csi\" cannot be set #> Warning: graphical parameter \"cxy\" cannot be set #> Warning: graphical parameter \"din\" cannot be set #> Warning: graphical parameter \"page\" cannot be set"},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot B-splines — plot.cpr_bs","title":"Plot B-splines — plot.cpr_bs","text":"Plot B-splines","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot B-splines — plot.cpr_bs","text":"","code":"# S3 method for cpr_bs plot(x, ..., show_xi = TRUE, show_x = FALSE, color = TRUE, digits = 2, n = 100)"},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot B-splines — plot.cpr_bs","text":"x cpr_bs object show_xi logical, show knot locations, using Greek letter xi, x-axis show_x logical, show x values knots x-axis color logical, TRUE (default) splines plotted color.  FALSE splines black lines. digits number digits right decimal place report value knot. n number values use plot splines, defaults 100 ... currently used","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_bs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot B-splines — plot.cpr_bs","text":"","code":"bmat <- bsplines(seq(-3, 2, length = 1000), iknots = c(-2, 0, 0.2)) #> Warning: At least one x value >= max(bknots) plot(bmat, show_xi = TRUE,  show_x = TRUE)  plot(bmat, show_xi = FALSE, show_x = TRUE)  plot(bmat, show_xi = TRUE,  show_x = FALSE)  ## Default  plot(bmat, show_xi = FALSE, show_x = FALSE)  plot(bmat, show_xi = FALSE, show_x = FALSE)  plot(bmat, show_xi = FALSE, show_x = FALSE, color = FALSE)"},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Control Nets — plot.cpr_cn","title":"Plotting Control Nets — plot.cpr_cn","text":"Three-dimensional plots control nets /surfaces","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Control Nets — plot.cpr_cn","text":"","code":"# S3 method for cpr_cn plot(   x,   ...,   xlab = \"\",   ylab = \"\",   zlab = \"\",   show_net = TRUE,   show_surface = FALSE,   get_surface_args,   net_args,   surface_args,   rgl = TRUE )"},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Control Nets — plot.cpr_cn","text":"x cpr_cn object ... common arguments used plot control net surface, e.g., xlim, ylim, zlim. xlab, ylab, zlab labels axes. show_net logical, show control net show_surface logical, show tensor product surface get_surface_args list arguments passed get_surface call.  call generates needed data sets used plotting. net_args arguments used explicitly control net.  Ignored show_net = FALSE. surface_args arguments used explicitly surface.  Ignored show_surface = FALSE. rgl TRUE, default, generate use rgl::persp3d generate graphics.  FALSE, use plot3D::persp3D generate graphics.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_cn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Control Nets — plot.cpr_cn","text":"result get_surface call returned invisibly.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_cn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting Control Nets — plot.cpr_cn","text":"plotting method generates three-dimensional plots control net, surface, , cpr_cn objects.  three-dimensional plots generated either persp3D form plot3D package persp3d rgl package. rgl graphics may may work system depending support OpenGL. Building complex customized graphics might easier use get_surface generate needed data plotting.  See vignette(topic = \"cnr\", package = \"cpr\") examples building different plots. rgl graphics, surface_args net_args lists rgl.material arguments passed persp3d. Defaults col = \"black\", front = \"lines\", back = \"lines\" net_args col = \"grey20\", front = \"fill\", back = \"lines\" surface_args. plot3D graphics defaults values net_args surface_args.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/plot.cpr_cn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Control Nets — plot.cpr_cn","text":"","code":"## see vignette(topic = \"cnr\", package = \"cpr\")"},{"path":"http://www.peteredewitt.com/cpr/reference/predict.cpr_cp.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Prediction — predict.cpr_cp","title":"Model Prediction — predict.cpr_cp","text":"Model prediction cpr_cp cpr_cn objects.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/predict.cpr_cp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Prediction — predict.cpr_cp","text":"","code":"# S3 method for cpr_cp predict(object, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/predict.cpr_cp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Prediction — predict.cpr_cp","text":"object cpr_cp cpr_cn object ... passed predict","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/print.cpr_bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Print bsplines — print.cpr_bs","title":"Print bsplines — print.cpr_bs","text":"Print bsplines","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/print.cpr_bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print bsplines — print.cpr_bs","text":"","code":"# S3 method for cpr_bs print(x, n = 6L, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/print.cpr_bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print bsplines — print.cpr_bs","text":"x cpr_bs object. n, number rows B-spline basis matrix display, defaults 6L. ... currently used.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/print.cpr_bs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print bsplines — print.cpr_bs","text":"object x returned invisibly","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/sign_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign Changes — sign_changes","title":"Sign Changes — sign_changes","text":"Count number times first, second, derivative spline changes sign.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/sign_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign Changes — sign_changes","text":"","code":"sign_changes(   object,   lower = min(object$bknots),   upper = max(object$bknots),   n = 1000,   derivative = 1L,   ... )"},{"path":"http://www.peteredewitt.com/cpr/reference/sign_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign Changes — sign_changes","text":"object cpr_cp object lower lower limit integral upper upper limit integral n number values assess derivative lower upper. derivative integer value denoted first second derivative ... pass ","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/sign_changes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign Changes — sign_changes","text":"number times sign first second derivative changes within specified interval.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/sign_changes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign Changes — sign_changes","text":"","code":"xvec <- seq(0, 6, length = 500)  # Define the basis matrix bmat1 <- bsplines(x = xvec, iknots = c(1, 1.5, 2.3, 4, 4.5)) #> Warning: At least one x value >= max(bknots) bmat2 <- bsplines(x = xvec) #> Warning: At least one x value >= max(bknots)  # Define the control vertices ordinates theta1 <- c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5) theta2 <- c(1, 3.4, -2, 1.7)  # build the two control polygons cp1 <- cp(bmat1, theta1) cp2 <- cp(bmat2, theta2) plot(cp1, cp2, show_cp = FALSE, show_spline = TRUE)   sign_changes(cp1) #> [1] 4 sign_changes(cp2) #> [1] 2"},{"path":"http://www.peteredewitt.com/cpr/reference/spdg.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","title":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","text":"Simulated data set based Study Women's Health Across Nation (SWAN) Daily Hormone Study (DHS).","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/spdg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","text":"","code":"spdg"},{"path":"http://www.peteredewitt.com/cpr/reference/spdg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","text":"data.frame. Variables data set: id Subject ID age Age, years subject ttm Time--menopause, years ethnicity Ethnicity, factor five levels: Caucasian, Black,  Chinese, Hispanic, Japanese bmi Body Mass Index day_from_dlt integer value number days Day  Luteal Transition (DLT).  DLT day_from_dlt == 0.  Negative  values indicate follicular phase, positive values luteal phase. day_of_cycle day cycle day scaled day--cycle [-1, 1] 0 DLT.  See  Details pdg simulated PDG value","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/spdg.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","text":"simulated data.  see script generated data set please visit https://github.com/dewittpe/cpr look scripts data-raw directory.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/spdg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","text":"Pregnanediol glucuronide (PDG) urine metabolite progesterone.  data set simulated similar characteristics subset SWAN DHS data.  SWAN DHS data motivating data set method development lead cpr package.  DHS data made public, simulated data set provided use examples instructions use cpr package.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/spdg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated Pregnanediol glucuronide (PDG) Data — spdg","text":"Santoro, Nanette, et al. \"Body size ethnicity associated menstrual cycle alterations women early menopausal transition: Study Women's Health across Nation (SWAN) Daily Hormone Study.\" Journal Clinical Endocrinology & Metabolism 89.6 (2004): 2622-2631.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/trimmed_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Trimmed Quantiles — trimmed_quantile","title":"Trimmed Quantiles — trimmed_quantile","text":"data \\(X = x_1, x_2, \\ldots, x_n\\), order statistics \\(x_{(1)}, x_{(2)}, \\ldots, x_{(r)}\\) return quantiles trimmed data set, e.g., \\(\\boldsymbol{X} \\backslash \\{x_{(1)}, x_{(r)}\\}\\) (trim = 1), \\(\\boldsymbol{X} \\backslash \\{x_{(1)}, x_{(2)}, x_{(r-1)}, x_{(r)}\\}\\) (trim = 2).","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/trimmed_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trimmed Quantiles — trimmed_quantile","text":"","code":"trimmed_quantile(x, trim = 1L, use_unique = TRUE, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/trimmed_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trimmed Quantiles — trimmed_quantile","text":"x numeric vector trim defaults 1, omitting min max use_unique logical, true (defaults), base quantiles unique values, false, base quantiles data, trimming. ... arguments pass stats::quantile","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/trimmed_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trimmed Quantiles — trimmed_quantile","text":"","code":"trimmed_quantile(1:100, prob = 1:23 / 24, name = FALSE) #>  [1]  6.041667 10.083333 14.125000 18.166667 22.208333 26.250000 30.291667 #>  [8] 34.333333 38.375000 42.416667 46.458333 50.500000 54.541667 58.583333 #> [15] 62.625000 66.666667 70.708333 74.750000 78.791667 82.833333 86.875000 #> [22] 90.916667 94.958333  # Warning # trimmed_quantile(1:100, trim = .3, prob = 1:23 / 24, name = FALSE)  # no warning trimmed_quantile(1:100, trim = 3, prob = 1:23 / 24, name = FALSE) #>  [1]  7.875 11.750 15.625 19.500 23.375 27.250 31.125 35.000 38.875 42.750 #> [11] 46.625 50.500 54.375 58.250 62.125 66.000 69.875 73.750 77.625 81.500 #> [21] 85.375 89.250 93.125"},{"path":"http://www.peteredewitt.com/cpr/reference/update_bsplines.html","id":null,"dir":"Reference","previous_headings":"","what":"Update bspline or btensor calls — update_bsplines","title":"Update bspline or btensor calls — update_bsplines","text":"Update cpr_bs cpr_bt objects alone within cpr_cp cpr_cn objects.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/update_bsplines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update bspline or btensor calls — update_bsplines","text":"","code":"update_bsplines(object, ..., evaluate = TRUE)  update_btensor(object, ..., evaluate = TRUE)"},{"path":"http://www.peteredewitt.com/cpr/reference/update_bsplines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update bspline or btensor calls — update_bsplines","text":"object object update. ... things update, expected iknots, df, bknots, order. evaluate true evaluate new call else return call.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/update_bsplines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update bspline or btensor calls — update_bsplines","text":"","code":"################################################################################ ##                          Updating a cpr_bs object                          ## # construct a B-spline basis bmat <- bsplines(seq(1, 10, length = 15), df = 5, order = 3) #> Warning: At least one x value >= max(bknots)  # look at the structure of the basis str(bmat) #>  'cpr_bs' num [1:15, 1:5] 1 0.64 0.36 0.16 0.04 0 0 0 0 0 ... #>  - attr(*, \"order\")= num 3 #>  - attr(*, \"df\")= num 5 #>  - attr(*, \"iknots\")= num [1:2] 4.21 6.79 #>  - attr(*, \"bknots\")= num [1:2] 1 10 #>  - attr(*, \"xi\")= num [1:8] 1 1 1 4.21 6.79 ... #>  - attr(*, \"xi_star\")= num [1:5] 1 2.61 5.5 8.39 10 #>  - attr(*, \"call\")= language bsplines(x = seq(1, 10, length = 15), df = 5, order = 3) #>  - attr(*, \"environment\")=<environment: 0x561a8347e228>   # change the order str(update_bsplines(bmat, order = 4)) #> Warning: At least one x value >= max(bknots) #>  'cpr_bs' num [1:15, 1:5] 1 0.6297 0.3644 0.1866 0.0787 ... #>  - attr(*, \"order\")= num 4 #>  - attr(*, \"df\")= num 5 #>  - attr(*, \"iknots\")= num 5.5 #>  - attr(*, \"bknots\")= num [1:2] 1 10 #>  - attr(*, \"xi\")= num [1:9] 1 1 1 1 5.5 10 10 10 10 #>  - attr(*, \"xi_star\")= num [1:5] 1 2.5 5.5 8.5 10 #>  - attr(*, \"call\")= language bsplines(x = seq(1, 10, length = 15), df = 5, order = 4) #>  - attr(*, \"environment\")=<environment: 0x561a8347e228>   # change the order and the degrees of freedom str(update_bsplines(bmat, df = 12, order = 4)) #> Warning: At least one x value >= max(bknots) #>  'cpr_bs' num [1:15, 1:12] 1 0.18659 0.00292 0 0 ... #>  - attr(*, \"order\")= num 4 #>  - attr(*, \"df\")= num 12 #>  - attr(*, \"iknots\")= num [1:8] 2.5 3.36 4.21 5.07 5.93 ... #>  - attr(*, \"bknots\")= num [1:2] 1 10 #>  - attr(*, \"xi\")= num [1:16] 1 1 1 1 2.5 ... #>  - attr(*, \"xi_star\")= num [1:12] 1 1.5 2.29 3.36 4.21 ... #>  - attr(*, \"call\")= language bsplines(x = seq(1, 10, length = 15), df = 12, order = 4) #>  - attr(*, \"environment\")=<environment: 0x561a8347e228>   ################################################################################ ##                          Updating a cpr_bt object                          ## # construct a tensor product tpmat <- btensor(list(x1 = seq(0, 1, length = 10), x2 = seq(0, 1, length = 10)),                  df = list(4, 5)) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) tpmat #> Tensor Product Matrix dims: [10 x 20] #>  #>  'cpr_bt' num [1:10, 1:20] 1 0.330452 0.080677 0.010974 0.000235 ... #>  - attr(*, \"bspline_list\")=List of 2 #>  - attr(*, \"call\")= language btensor(x = list(x1 = seq(0, 1, length = 10), x2 = seq(0, 1, length = 10)),      df = list(4, 5)) #>  - attr(*, \"environment\")=<environment: 0x561a8347e228>   # update the degrees of freedom update_btensor(tpmat, df = list(6, 7)) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Tensor Product Matrix dims: [10 x 42] #>  #>  'cpr_bt' num [1:10, 1:42] 1 0.0884 0.0013 0 0 ... #>  - attr(*, \"bspline_list\")=List of 2 #>  - attr(*, \"call\")= language btensor(x = list(x1 = seq(0, 1, length = 10), x2 = seq(0, 1, length = 10)),      df = list(6, 7)) #>  - attr(*, \"environment\")=<environment: 0x561a8347e228>   ################################################################################ ##      Updating bsplines or btensor on the right and side of a formula       ##  f1 <- y ~ bsplines(x, df = 14) + var1 + var2 f2 <- y ~ btensor(x = list(x1, x2), df = list(50, 31), order = list(3, 5))  + var1 + var2  update_bsplines(f1, df = 13, order = 5) #> y ~ bsplines(x, df = 13, order = 5) + var1 + var2 #> <environment: 0x561a8347e228> update_btensor(f2, df = list(13, 24), order = list(3, 8)) #> y ~ btensor(x = list(x1, x2), df = list(13, 24), order = list(3,  #>     8)) + var1 + var2 #> <environment: 0x561a8347e228>  ################################################################################ ##                          Updating a cpr_cp object                          ## data(spdg, package = \"cpr\") init_cp <- cp(pdg ~ bsplines(day, df = 30) + age + ttm, data = spdg) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) updt_cp <- update_bsplines(init_cp, df = 5) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots)  ################################################################################ ##                          Updating a cpr_cn object                          ## init_cn <- cn(pdg ~ btensor(list(day, age), df = list(30, 4)) + ttm, data = spdg) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) updt_cn <- update_btensor(init_cn, df = list(30, 2), order = list(3, 2)) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots) #> Warning: At least one x value >= max(bknots)"},{"path":"http://www.peteredewitt.com/cpr/reference/us_covid_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"United States Laboratoy Confirmed COVID-19 Cases — us_covid_cases","title":"United States Laboratoy Confirmed COVID-19 Cases — us_covid_cases","text":"Number laboratory-confirmed COVID-19 cases United States, reported Centers Disease Control, January 1 2020 May 11, 2023, end public health emergency declaration.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/us_covid_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"United States Laboratoy Confirmed COVID-19 Cases — us_covid_cases","text":"","code":"us_covid_cases"},{"path":"http://www.peteredewitt.com/cpr/reference/us_covid_cases.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"United States Laboratoy Confirmed COVID-19 Cases — us_covid_cases","text":"data.frame two columns date year, month, day cases number reported laboratory-confirmeded COVID-19 cases","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/us_covid_cases.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"United States Laboratoy Confirmed COVID-19 Cases — us_covid_cases","text":"Download original data <https://data.cdc.gov/Case-Surveillance/COVID-19-Case-Surveillance-Public-Use-Data/vbim-akqf> December 5, 2023.  reported data set last updated November 3, 2023.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/wiggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Wiggliness of a Spline function — wiggle","title":"Wiggliness of a Spline function — wiggle","text":"Calculate integral squared second derivative spline function.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/wiggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wiggliness of a Spline function — wiggle","text":"","code":"wiggle(object, lower, upper, stop.on.error = FALSE, ...)"},{"path":"http://www.peteredewitt.com/cpr/reference/wiggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wiggliness of a Spline function — wiggle","text":"object cpr_cp object lower lower limit integral upper upper limit integral stop..error default FALSE, see integrate. ... additional arguments passed integrate","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/wiggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wiggliness of a Spline function — wiggle","text":"integrate.","code":""},{"path":"http://www.peteredewitt.com/cpr/reference/wiggle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wiggliness of a Spline function — wiggle","text":"wiggliness spline function defined $$\\int \\left( \\frac{\\mathrm{d}^2}{\\mathrm{d}x^2} f \\left(x \\right) \\right)^2 \\mathrm{d}x.$$","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/reference/wiggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wiggliness of a Spline function — wiggle","text":"","code":"xvec <- seq(0, 6, length = 500)  # Define the basis matrix bmat1 <- bsplines(x = xvec, iknots = c(1, 1.5, 2.3, 4, 4.5)) #> Warning: At least one x value >= max(bknots) bmat2 <- bsplines(x = xvec) #> Warning: At least one x value >= max(bknots)  # Define the control vertices ordinates theta1 <- c(1, 0, 3.5, 4.2, 3.7, -0.5, -0.7, 2, 1.5) theta2 <- c(1, 3.4, -2, 1.7)  # build the two control polygons cp1 <- cp(bmat1, theta1) cp2 <- cp(bmat2, theta2) plot(cp1, cp2, show_cp = FALSE, show_spline = TRUE)   wiggle(cp1) #> 152.7839 with absolute error < 0.0049 wiggle(cp2) #> 4.037222 with absolute error < 4.5e-14"},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-3-0-9000","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.3.0.9000","text":"plot.cpr_cp gains argument comparitive , set FALSE one cpr_cp passed plotting, graphic appear like plot.cpr_bs results. comparitive = TRUE one cpr_cp present, behavior v0.3.0 retained. cp.formula gains methods.args argument pass arguments regression method instead relying .... d_order_statistic p_order_statistic added. functions allow get density distribution function jth order statisitic sample size n distribution defined density distribution functions within R. sign_changes count number sign changes first second derivative spline function.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"user-visible-changes-0-3-0-9000","dir":"Changelog","previous_headings":"","what":"User Visible Changes","title":"Version 0.3.0.9000","text":"loglikelihood exported namespace summary.cpr_cp now calcualtes “wiggle” function default, , changes default wiggle = FALSE wiggle = TRUE cp cn default keep_fit argument set TRUE. change made simplify prediction methods.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"non-user-visible-changes-0-3-0-9000","dir":"Changelog","previous_headings":"","what":"Non-User Visible Changes","title":"Version 0.3.0.9000","text":"Refactor c++ defining basis functions, derivatives basis functions, b-splines structures cp.formula checks formula requires bsplines used first term right hand side formula.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"defunct-functions-0-3-0-9000","dir":"Changelog","previous_headings":"","what":"Defunct Functions","title":"Version 0.3.0.9000","text":"major refactor internal code since v0.3.0 resulted several functions becoming defunct, see help(cpr-defunct) details.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"Version 0.3.0","title":"Version 0.3.0","text":"CRAN release: 2023-11-29","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-examples-0-3-0","dir":"Changelog","previous_headings":"","what":"New Examples","title":"Version 0.3.0","text":"cpr examples","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"other-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"Version 0.3.0","text":"Depends Rcpp >= 0.12.11 (actually moved >= 1.0.11) handle registering native routines. Moves rgl Imports Suggests (re #36) Refactoring base code eliminate use dplyr, tidyr, tibble, etc. Focus base R methods reduce install dependencies improve long term stability package. Require R > 3.5.0 Stop using testthat testing Remove use tidyr, dplyr Improve documentation Minor bug fixes Replace use now deprecated ggplot2::aes_string","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-023","dir":"Changelog","previous_headings":"","what":"Version 0.2.3","title":"Version 0.2.3","text":"CRAN release: 2017-03-07 First public release.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-2-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.2.3","text":"plot.cpr_cn supports rgl plot3D graphics start vignette.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.2.2","text":"get_spline S3 method getting data.frame interpolated values spline given cpr_cp object. Later development add methods cpr_cn objects. predict.cpr_cp predict.cpr_cn methods added matrix_rank added update_bsplines update_btensor methods added (#27)","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-021","dir":"Changelog","previous_headings":"","what":"Version 0.2.1","title":"Version 0.2.1","text":"Documentation improvements.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.2.1","text":"influence_of plot.cpr_influence_of provide clean interface users explore influence set knots spline function. (#19) color (TRUE/FALSE) option added plot.cpr_bs. plot.cpr_cn lets user plot 2D surfaces tensor product surfaces. plots whole surface input 2D tensor product, 2D slice evaluated given value margins 3+ dimensional tensor products. . collection .cpr_cp, .cpr_bs, … functions added. dataset spdg added package.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"other-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"Version 0.2.1","text":"removed redundant build_tensor definition","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"version fairly polished set tools b-splines, cpr, cnr. version seems good place use three major papers Methods 1: uni-variable functions, Methods 2: multi-variable functions, Software paper. Continued development focused bug fixes minor enhancements.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.2.0","text":"Option save fits cnr (#8) Option define number polynomial coefficients use cnr (#10) x-axis tick label options plotting b-splines (#12) added show_xi cpr:::plot.cp using ggplot2::geom_rug show location knots control polygons plotted. summary cpr_cn cpr_cnr objects added. plot method cpr_cnr objects. margin option cnr allows user specify marginals CNR applied . Using sec.axis option ggplot2_2.2.0 plotting knot sequence numeric values plot.cpr_bs (#18)","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.2.0","text":"arguments plot.cpr_cpr fixed (#14) correct construction missing iknots argument btensor keep correctly handled cnr call. show_xi correctly handled plot.cpr_cp call.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"non-visible-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Non visible changes","title":"Version 0.2.0","text":"non-exported function knot_expr created help plotting knot locations cpr:::plot.cpr_bs.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.1.1","text":"plot.cpr_cp allows user suppress plotting control polygon. plotting multiple control polygons splines, option make easier view spline functions.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"non-visible-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Non visible changes","title":"Version 0.1.1","text":"Extended testing scripts.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"First version univariable cpr methods ready deployment","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"big-picture-0-1-0","dir":"Changelog","previous_headings":"","what":"Big picture","title":"Version 0.1.0","text":"cpr::cp cpr::cpr used simulations aimed part first manuscript. Modifications might needed, hopefully univariable methods stable. lot changes implementation API occurred 0.0.x series. aim version 0.2.0 similar API cpr::cn cpr::cnr provided cpr::cp cpr::cpr calls.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-0-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"version 0.0.5","text":"First second derivatives B-splines via bsplineD","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"extended-documentation-0-0-5","dir":"Changelog","previous_headings":"","what":"Extended Documentation","title":"version 0.0.5","text":"Examples added bsplines","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"end-user-non-visible-changes-0-0-5","dir":"Changelog","previous_headings":"","what":"End User non-visible changes:","title":"version 0.0.5","text":"Added ---exported function generate_cp_data Redesign deboor.cpp file bsplines accessible. prior design allowed access basis, current design allows access generic B-splines.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-003","dir":"Changelog","previous_headings":"","what":"version 0.0.3","title":"version 0.0.3","text":"Version 0.0.3 version package used run analysis simulations presented paper submitted 28th International Biometrics Conference, Western North American Region (WNAR) Internal Biometric Society, Student paper competition. conference held 10 - 16 July 2016 Victoria, British Columbia, Canada.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"version 0.0.3","text":"Corrected attributes calls within cpr adjusting attributes set cpr_cp. plot.cpr_bs correctly displays indices knot sequence.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"end-user-visible-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"End User Visible changes:","title":"version 0.0.3","text":"knot insertion matrix W accessible end user new way. Names functions boehem.cpp cleaner. plot.cpr_cpr allows user select either control polygons sums squared residuals plotted.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"vignettes-0-0-3","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"version 0.0.3","text":"Removed background vignette… much detail right now, much time required build install package.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"end-user-non-visible-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"End User non-visible changes:","title":"version 0.0.3","text":"Redundant definition greville_sites removed.","code":""},{"path":[]},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"new features","title":"version 0.0.2","text":"Added function tensor building tensor products cpr::bsplines. Added function influence_weights get influence weights internal knot marginal tensor product. .cpr_bs added. S3 methods cp","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"bug-fixes-0-0-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"version 0.0.2","text":"trimmed quantile handles use_unique option correctly better handling … cp() cpr()","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-0019003","dir":"Changelog","previous_headings":"","what":"version 0.0.1.9003","title":"version 0.0.1.9003","text":"First usable version method based ‘importance weight’ internal knots based reversing methods presented Boehm (1980). Development metrics methods parsing preferable models. Version 0.0.1.9003 first stable version fitting exact data model.","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"vignettes-0-0-1-9003","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"version 0.0.1.9003","text":"beginnings control-polygon vignette started (version 0.0.1.9001)","code":""},{"path":"http://www.peteredewitt.com/cpr/news/index.html","id":"version-001","dir":"Changelog","previous_headings":"","what":"version 0.0.1","title":"version 0.0.1","text":"version based idea using angle reduce control polygon good idea. literature review simulations showed otherwise. version marked posterity cpp functions going useful following versions well.","code":""}]
