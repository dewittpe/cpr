\subsection{Control Polygons} \label{sec:cpr_cp}
\code{cpr\_cp} objects are constructed by the S3 generic function
<<>>=
methods("cp")
@

The \code{cpr:::cp.cpr\_bs} method take a \code{cpr\_bs} object and a vector of
ordinates to construct a control polygon as defined
in~\eqref{eq:control_polygon}.  For example, the control polygon showing in
Figure~\ref{fig:cp_plot} is generated by the \code{bmat} above and the following
ordinates.
<<cp.cpr_bs>>=
<<eg_bmat>>
<<eg_cp.cpr_bs>>
<<eg_cp.cpr_bs_str>>
@
The resulting \code{cpr\_cp} object seems trivial.  A \code{data.frame} with the
Greville sites and the given ordinates, along with attributes of the B-spline
basis.  There are several elements related to regression model fits which are
\code{NA} when a \code{cpr.cpr_bs} is used to generate the control polygon.
The regression related elements of a \code{cpr\_cp} object are populated when
the control polygon is generated using the \code{cpr:::cp.formula} method.

The \code{cp.formula} method is one of the most useful functions provided in
\pkg{cpr}.  This method uses regression methods to determine the control
vertices and is called many times when running the CPR algorithm.
<<cp.formula_args>>=
@
The arguments for this function are
\begin{itemize}
  \item \code{formula} a regression formula, sufficient for the regression
    \code{method} which contains one call to \code{bsplines} on the
    right-hand-side.
  \item \code{data} a required \code{data.frame} containing the variables noted
    in the \code{formula}.
  \item \code{method} the regression method.  By default this is the \code{lm}
    call from the base \code{stats} package.  This regression method is used to
    estimate the ordinates for the control polygon.
  \item \code{\ldots} additional arguments passed to \code{method}.
  \item \code{keep\_fit} If \code{TRUE} the object returned from \code{method}
    is stored in the resulting \code{cpr\_cp} object.  When \code{FALSE} only
    some summary statistics are retained.
  \item \code{check\_rank} checks that the design matrix for the regression
    model is sufficient.  This is done via the \code{cpr::matrix\_rank}
    function.
\end{itemize}

A simple example, fitting the sine function with a cubic B-spline with ten
internal knots, is below.
<<calling_cp.formula>>=
@

A quick note about how \code{cp.formula} generates design matrices.  By
construction the \code{cpr::bsplines} call returns the full B-spline basis
matrix.  As such bases are partition of unity, the standard intercept in a
regression model, implicit in \proglang{R} regression formulae, would be
co-linear with the basis and a rank deficient design matrix would be generated.
To elevate this issue, \code{cp.formula} automatically prepends the
right-hand-side of the \code{formula} with \code{0 +} to omit the intercept.
This is also consistent with \eqref{eq:cpr_general_model}, a varying means
model.  It is also worth noting that additional additive terms can be added to
the right-hand-side of the \code{formula}.  The code{cp.formula} call will
correctly build design matrices for model formulae when additive continuous
variables and/or categorical variables are specified.


