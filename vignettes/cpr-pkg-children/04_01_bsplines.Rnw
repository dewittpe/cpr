\subsection{B-Splines} \label{sec:cpr_bs}
The standard installation of \proglang{R} includes the
\pkg{splines}~\citep{R-base} package and the \code{splines::bs} function for generating
the basis matrix of B-splines, {\it i.e.} the matrix shown in
\eqref{eq:basis_matrix}.  The \pkg{cpr} package provides an alternative
function, \code{cpr::bsplines} for generating B-spline basis matrices with the class
\code{cpr\_bs}.  The differences in the functional arguments and the attributes
of the return objects between \code{splines::bs} and \code{cpr::bsplines} are listed in
Table~\ref{tab:bs_vs_bsplines}. 
\begin{table}
  \caption{Comparison of the arguments, with default values, for \code{splines::bs} and
    \code{cpr::bsplines}.  The attributes for the resulting \code{splines::bs} and
  \code{cpr\_bs} objects are also reported.}
  \label{tab:bs_vs_bsplines}
  \centering
\begin{tabular}{lll} \hline
           & \code{splines::bs}               & \code{cpr::bsplines}     \\ \hline
 Arguments &                                  &                          \\
           & \code{x}                         & \code{x}                 \\
           & \code{df}                        & \code{df}                \\
           & \code{knots}                     & \code{iknots}            \\
           & \code{degree = 3}                & \code{order = 4L}        \\
           & \code{Boundary.knots = range(x)} & \code{bknots = range(x)} \\
           & \code{intercept = FALSE}         & --                       \\ \hline
Attributes &                                  &                          \\
           & \code{dim}                       & \code{dim}               \\
           & \code{degree}                    & \code{order}             \\
           & \code{knots}                     & \code{iknots}            \\
           & \code{Boundary.knots}            & \code{bknots}            \\
           & \code{intercept}                 & --                       \\
           & --                               & \code{xi}                \\
           & --                               & \code{xi\_star}          \\
           & \code{class}                     & \code{class}             \\
           & --                               & \code{call}              \\
           & --                               & \code{environment}       \\ \hline
\end{tabular}
\end{table}

A major difference between the two functions is related to the \code{intercept}
argument of \code{splines::bs}.  By default, \code{splines::bs} will omit the
first column of the basis whereas \code{cpr::bsplines} will return the whole
basis.  The omission of the first column of the basis generated by
\code{splines::bs} allows for additive \code{splines::bs} calls to be used on the
right-hand-side of a regression formula and generate a full rank design matrix.
If additive \code{cpr::bsplines} calls, or additive \code{splines::bs} with \code{intercept =
TRUE}, are on the right-hand-side of the regression equation the resulting
design matrix will be rank deficient.  This is a result of the B-splines being a
partition of unity.  As the CPR algorithm is based on having the whole basis,
{he \code{cpr::bsplines} function is provided to make it easy to work with the whole
basis without having to remember to use non-default settings in \code{splines::bs}.
The default call \code{splines::bs(x)} is replicated
by \code{cpr::bsplines(x)[, -1]} and the default call \code{cpr::bsplines(x)} is
replicated \code{splines::bs(x, intercept = TRUE)}.

Specifying the polynomial order and knot sequence between the two functions
differ between \code{splines::bs} and \code{cpr::bsplines}.
\code{splines::bs} uses the polynomial \code{degree} whereas \code{cpr::bsplines} uses the
polynomial \code{order} (order = degree + 1) to define the splines.  The default
for both \code{splines::bs} and \code{cpr::bsplines} is to generate cubic B-splines.

For both \code{splines::bs} and
\code{cpr::bsplines} only the degrees of freedom or the internal knots need to be
specified.  If the end user specifies both, the specified knots take precedence.
If only \code{df} is specified then \code{df - order} internal knots will be
generated.
\code{splines::bs} and \code{cpr::bsplines}.
For a numeric vector \code{x}, 
\code{splines::bs} will generate a sequence of
internal knots via a call equivalent to 
<<eval = FALSE, echo = TRUE>>=
knots <- df + order + (1L - intercept)
stats::quantile(x,
  probs = seq(0, 1, length = length(knots) + 2L)[-c(1, length(knots) + 2L)])
@ 
whereas \code{cpr::bsplines} will generate a sequence  equivalent to
<<eval = FALSE, echo = TRUE>>=
stats::quantile(unique(x)[-c(1, length(unique(x)))],
                probs = seq(1, df - order, by = 1) / (df - order + 1))
@
The function \code{cpr::trimmed_quantile} is provided to generate such
sequences.

The return object from both \code{splines::bs} and \code{cpr::bsplines} is a matrix.  The
attributes returned include the argument values used to construct the basis.
The major difference in the attributes between the two objects is that
\code{cpr::bsplines} returns the full knot sequence, $\bs{\xi},$ in the \code{xi}
element and the Greville sites, $\bs{\xi}^{*}$ in the \code{xi\_star} element.
These attributes are used in the construction of control polygons.
Lastly, the classes for the two objects differ: \code{splines::bs} returns a three
classes, \code{c("bs", "basis", "matrix")} and \code{cpr::bsplines} returns two
classes, \code{c("cpr\_bs", "matrix")}.  An example construction and structure
are below.
<<eg_bmat_construction>>=
<<eg_bmat>>
bmat
@

There is no default method for plotting \code{splines::bs} objects.  If the numeric
vector \code{x} is sorted, then a minimally useful basis plot can be generated
via \code{graphics::matplot}.  The \pkg{cpr} package provides an plotting method
for the \code{cpr\_bs} objects. The plotting method returns a \code{c("gg",
"ggplot")} object and can be modified by adding additions layers as would be
done for any other \code{ggplot} object.  For example, the basis plot in
Figure~\ref{fig:basis_plot} was generated by
<<eg_basis_plot_uneval, eval = FALSE>>=
<<eg_basis_plot>>
@
